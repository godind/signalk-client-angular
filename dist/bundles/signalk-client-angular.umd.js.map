{"version":3,"file":"signalk-client-angular.umd.js.map","sources":["ng://signalk-client-angular/lib/utils.ts","ng://signalk-client-angular/lib/http-api.ts","ng://signalk-client-angular/lib/stream-api.ts","ng://signalk-client-angular/lib/stream-worker.ts","ng://signalk-client-angular/lib/signalk-client.ts","ng://signalk-client-angular/lib/signalk-client.module.ts"],"sourcesContent":["// ** Path utilities\r\nexport class Path {\r\n\r\n    // ** transform dot notation to slash\r\n    static dotToSlash(path:string):string {\r\n        if(path.indexOf('.')!=-1) { return path.split('.').join('/') }\r\n        else { return path }\r\n    }\r\n\r\n    // ** parse context to valid Signal K path\r\n    static contextToPath(context:string):string {\r\n        let res= (context=='self' ) ? 'vessels.self': context;\r\n        return res.split('.').join('/');\r\n    }    \r\n\r\n}\r\n\r\n// ** Message templates **\r\nexport class Message {\r\n   \r\n    // ** return UPDATES message object\r\n    static updates() { \r\n        // array values= { values: [ {path: xx, value: xx } ] }\r\n        return { \r\n            context: null,\r\n            updates: [] \r\n        }\r\n    }\r\n    // ** return SUBSCRIBE message object\r\n    static subscribe() { \r\n        /* array values= {\r\n            \"path\": \"path.to.key\",\r\n            \"period\": 1000,\r\n            \"format\": \"delta\",\r\n            \"policy\": \"ideal\",\r\n            \"minPeriod\": 200\r\n            } */\r\n        return { \r\n            context: null,\r\n            subscribe: [] \r\n        }\r\n    }    \r\n    // ** return UNSUBSCRIBE message object\r\n    static unsubscribe() { \r\n        // array values= { \"path\": \"path.to.key\" }\r\n        return { \r\n            context: null,\r\n            unsubscribe: [] \r\n        }\r\n    }  \r\n    // ** return REQUEST message object\r\n    static request() { \r\n        return { \r\n            requestId: null\r\n        }\r\n    }           \r\n\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Path } from './utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKHttp {\r\n\r\n    private _token: string;\r\n\r\n    // **************** ATTRIBUTES ***************************\r\n\r\n    public endpoint: string;\r\n    // ** set auth token value **\r\n    set token(val:string) { this._token= val }    \r\n\r\n    // *******************************************************\r\n\r\n    constructor( private http: HttpClient ) { }   \r\n    \r\n    // ** get the contents of the Signal K tree pointed to by self. returns: Observable \r\n    getSelf() { return this.get(`vessels/self`) }\r\n\r\n    //** get ID of vessel self via http. returns: Observable \r\n    getSelfId() { return this.get(`self`) }\r\n\r\n    // ** return observable response for meta object at the specified context and path\r\n    getMeta(context:string, path:string) { \r\n        return this.get(`${Path.contextToPath(context)}/${Path.dotToSlash(path)}/meta`);\r\n    }    \r\n\r\n    //** get API path value via http. returns: Observable \r\n    get(path:string) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= this.endpoint + Path.dotToSlash(path);\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.get( url, { headers: headers } );\r\n        }\r\n        else { return this.http.get(url) }\r\n    }\r\n\r\n    //** send value to API path via http put. returns: Observable \r\n\tput(context:string, path:string, value:any);\r\n\tput(context:string, path:string, key:any, value:any);\r\n    put(context:string, path:string, key?:any, value?:any) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= this.endpoint + Path.contextToPath(context) + '/' + Path.dotToSlash(path);\r\n        let msg = { value: {} } \r\n        if(typeof value=='undefined') { msg.value= key }\r\n\t\telse { msg.value[key]= value }\r\n\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.put(url, msg, { headers: headers } );\r\n        }        \r\n        else { return this.http.put(url, msg) }\r\n    } \r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { Message } from './utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKStream {\r\n\r\n\tprivate _connect: Subject<any>;\r\n    private _close: Subject<any>;\r\n\tprivate _error: Subject<any>;\r\n\tprivate _message: Subject<any>;\r\n\r\n    private ws: any;    \r\n    private _filter= null;               // ** id of vessel to filter delta messages\r\n    private _wsTimeout= 20000;           // ** websocket connection timeout  \r\n    private _token: string;  \r\n    \r\n   // **************** ATTRIBUTES ***************************\r\n\r\n    public onConnect: Observable<any>;\t\t\r\n    public onClose: Observable<any>;\t\r\n    public onError: Observable<any>; \t\r\n    public onMessage: Observable<any>;\r\n\r\n    public endpoint: string;\r\n    public selfId: string;\r\n\r\n    // ** set auth token value **\r\n    set token(val:string) { this._token= val }    \r\n    // ** get / set websocket connection timeout 3000<=timeout<=60000 **\r\n    get connectionTimeout():number { return this._wsTimeout }\r\n    set connectionTimeout(val:number) {\r\n        this._wsTimeout= (val<3000) ? 3000 : (val>60000) ? 60000 : val;\r\n    }   \r\n    // ** is WS Stream connected?\r\n    get isOpen():boolean { \r\n        return (this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) ? true : false;\r\n    }  \r\n    // ** get / set filter to select delta messages just for supplied vessel id   \r\n    get filter():string { return this._filter }\r\n    // ** set filter= null to remove message filtering\r\n    set filter(id:string) { \r\n        if( id && id.indexOf('self')!=-1 ) {  // ** self\r\n            this._filter= (this.selfId) ? this.selfId : null;\r\n        }\r\n        else { this._filter= id }\r\n    }    \r\n\r\n    // ******************************************************\r\n\r\n    constructor( ) { \r\n        this._connect= new Subject<any>();\r\n        this.onConnect= this._connect.asObservable();   \r\n        this._close= new Subject<any>();\r\n        this.onClose= this._close.asObservable();  \r\n        this._error= new Subject<any>();\r\n        this.onError= this._error.asObservable();  \r\n        this._message= new Subject<any>();\r\n        this.onMessage= this._message.asObservable();         \r\n    }   \r\n\r\n    // ** Close WebSocket connection\r\n    close() { if(this.ws) { this.ws.close(); this.ws= null; } }\r\n   \r\n\t// ** Open a WebSocket at provided url\r\n\topen(url:string, subscribe?:string, token?:string) {\r\n        url= (url) ? url : this.endpoint;\r\n        if(!url) { return }\r\n        let q= (url.indexOf('?')==-1) ? '?' : '&'\r\n        if(subscribe) { url+=`${q}subscribe=${subscribe}` } \r\n        if(this._token || token) { url+= `${(subscribe) ? '&' : '?'}token=${this._token || token}` } \r\n        \r\n        this.close();\r\n        this.ws = new WebSocket(url);\r\n        // ** start connection watchdog **\r\n        setTimeout( \r\n            ()=>{\r\n                if(this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) { \r\n                    console.warn(`Connection watchdog expired (${this._wsTimeout/1000} sec): ${this.ws.readyState}... aborting connection...`);\r\n                    this.close(); \r\n                }\r\n            }, this._wsTimeout\r\n        );\r\n\t\t\r\n\t\tthis.ws.onopen= e=> { this._connect.next(e) }\r\n\t\tthis.ws.onclose= e=> { this._close.next(e) }\r\n\t\tthis.ws.onerror= e=> { this._error.next(e) }\r\n\t\tthis.ws.onmessage= e=> {\r\n            let data: any;\r\n            if(typeof e.data === 'string') {\r\n                try { data= JSON.parse(e.data) }\r\n                catch(e) { return }\r\n            }\r\n            if(this.isHello(data)) { \r\n                this.selfId= data.self;\r\n                this._message.next(data);\r\n            }          \r\n            else if(this._filter && this.isDelta(data)) {\r\n                if(data.context== this._filter) { this._message.next(data) } \r\n            }                \r\n            else { this._message.next(data) } \r\n\t\t}\r\n    }      \r\n\r\n    // ** send data to Signal K stream\r\n    send(data:any) {\r\n        if(this.ws) {\r\n            if(typeof data === 'object') { data= JSON.stringify(data) }\r\n            this.ws.send(data);\r\n        }\r\n    }\r\n\r\n    // ** send value(s) via delta stream update **\r\n    sendUpdate(context:string, path:any)\r\n    sendUpdate(context:string='self', path:any, value?:any) {\r\n        let val= Message.updates();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        let uValues= [];\r\n        if(typeof path === 'string') {\r\n            uValues.push({ path: path, value: value });\r\n        }\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n            uValues= path;\r\n        }\r\n        val.updates.push({ values: uValues } ); \r\n        this.send(val);\r\n    }\r\n\r\n    // ** Subscribe to Delta stream messages options: {..}**\r\n    subscribe(context:string, path:any);\r\n    subscribe(context:string='*', path:any='*', options?:any) {\r\n        let val= Message.subscribe();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n           val.subscribe= path;\r\n        }\r\n        if(typeof path === 'string') {\r\n            let sValue= {};\r\n            sValue['path']= path;\r\n            if(options && typeof options === 'object') {\r\n                if(options['period']) { sValue['period']= options['period'] }\r\n                if(options['minPeriod']) { sValue['minPeriod']= options['period'] }\r\n                if(options['format'] && \r\n                    (options['format']=='delta' || options['format']=='full') ) { \r\n                        sValue['format']= options['format'];\r\n                }\r\n                if(options['policy'] && \r\n                    (options['policy']=='instant' || options['policy']=='ideal'\r\n                    || options['policy']=='fixed') ) { \r\n                        sValue['policy']= options['policy'];\r\n                }\r\n            }\r\n            val.subscribe.push(sValue);\r\n        }\r\n        this.send(val);        \r\n    }\r\n\r\n    // ** Unsubscribe from Delta stream messages **\r\n    unsubscribe(context:string='*', path:any='*') {\r\n        let val= Message.unsubscribe();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n           val.unsubscribe= path;\r\n        }\r\n        if(typeof path === 'string') { val.unsubscribe.push({path: path}) }\r\n        this.send(val); \r\n    }\r\n\r\n    // *************** MESSAGE PARSING ******************************\r\n    // ** returns true if message context is 'self'\r\n    isSelf(msg:any):boolean { return (msg.context== this.selfId) }\r\n    // ** returns true if message is a Delta message\r\n    isDelta(msg:any):boolean { return typeof msg.context!= 'undefined' }\r\n    // ** returns true if message is a Hello message\r\n    isHello(msg:any):boolean { return typeof msg.version!= 'undefined' }\r\n    // ** returns true if message is a request Response message\r\n    isResponse(msg:any):boolean { return typeof msg.requestId!= 'undefined' } \r\n\r\n}","/** Web Worker Service\r\n * ************************************/\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKStreamWorker  {\r\n\r\n\tprivate _error: Subject<any>;\r\n\tprivate _message: Subject<any>;\r\n    private worker: Worker;\r\n    \r\n   // **************** ATTRIBUTES ***************************\r\n\t\r\n    public onError: Observable<any>; \t\r\n    public onMessage: Observable<any>;\t\r\n\r\n   // *******************************************************    \r\n\r\n    constructor() {\r\n        this._error= new Subject<string>();\r\n        this.onError= this._error.asObservable();  \r\n        this._message= new Subject<string>();\r\n        this.onMessage= this._message.asObservable();   \r\n    } \r\n\r\n    ngOnDestroy() { this.worker.terminate(); this.worker = undefined; }\r\n\r\n    // ** Initialise worker\r\n    init(pathToFile:string) { \r\n        if(typeof(Worker)== \"undefined\") { return false }\r\n        if(this.worker) { this.worker.terminate() }   // ** terminate an open worker\r\n\r\n        this.worker= new Worker(pathToFile);\r\n        this.worker.onmessage= event=> { this._message.next(event) };\r\n        this.worker.onerror= event=> { this._error.next(event) };           \r\n        // ** worker ready for postMessage()\r\n    }    \r\n    \r\n    // ** Send message to worker\r\n    postMessage(msg:any) { if(this.worker) {this.worker.postMessage(msg) } }\r\n\r\n    // ** terminate worker\r\n    terminate() { if(this.worker) {this.worker.terminate()} }\r\n}","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { SignalKHttp } from './http-api';\nimport { SignalKStream } from './stream-api';\nimport { Path, Message } from './utils';\nimport { SignalKStreamWorker} from './stream-worker';\n\n@Injectable({ providedIn: 'root' })\nexport class SignalKClient {\n    \n    private hostname: string;\n    private port: number;\n    private protocol: string;\n  \n    private _version: string= 'v1';      // ** default Signal K api version\n    private _token: string;             // token for when security is enabled on the server\n\n    private debug(val: any) { if(isDevMode()){ console.log(val) } }\n    \n    // **************** ATTRIBUTES ***************************\n\n    // ** server information block **\n    public server= {\n        endpoints: {},\n        info: {},\n        apiVersions: []\n    }    \n    // ** get / set Signal K preferred api version to use **\n    get version():number { return parseInt( this._version.slice(1) ) }\n    set version(val: number) {\n        let v:string= 'v'+ val;\n        if(this.server.apiVersions.length==0) { \n            this._version= v;\n            this.debug(`Signal K api version set to: ${v}`);\n        }\n        else {\n            this._version= (this.server.apiVersions.indexOf(v)!=-1) ? v : this._version;\n            this.debug(`Signal K api version set request: ${v}, result: ${this._version}`);\n        }\n    }\n    // ** set auth token value **\n    set authToken(val:string) { \n        this._token= val;\n        this.api.token= val;\n        this.stream.token= val;\n    }    \n    // ** Message Object\n    get message() { return Message }\n\n    // *******************************************************\n    constructor( private http: HttpClient, \n                public api: SignalKHttp, \n                public stream: SignalKStream,\n                public worker: SignalKStreamWorker ) { \n        this.init();                          \n    }\n\n    ngOnDestroy() { this.stream.close() }   \n    \n    // ** initialise protocol, hostname, port values\n    private init(hostname:string='localhost', port:number=null, useSSL:boolean=false) {\n        this.hostname = hostname;\n        if(useSSL) {\n            this.protocol = 'https';\n            this.port = port || 443;\n        } \n        else {\n            this.protocol = 'http';\n            this.port = port || 80;\n        }        \n    }    \n\n    // **************** CONNECTION AND DISCOVERY  ********************\n\n    // ** Signal K server endpoint discovery request (/signalk).  \n    hello(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        this.init(hostname, port, useSSL);\n        return this.get('/signalk');\n    }    \n    // ** connect to server (endpoint discovery) and DO NOT open Stream\n    connect(hostname:string=null, port:number=null, useSSL:boolean=false): Promise<any> {\n        return new Promise( (resolve, reject)=> {\n            this.debug('Contacting Signal K server.........');\n            this.hello(hostname, port, useSSL).subscribe(    // ** discover endpoints **\n                response=> { \n                    if(this.stream) { this.stream.close() }\n                    this.processHello(response);\n                    this.api.endpoint= this.resolveHttpEndpoint();\n                    this.stream.endpoint= this.resolveStreamEndpoint();\n                    resolve(true);\n                },\n                error=> { \n                    this.disconnectedFromServer();       \n                    reject(error);\n                }\n            );\n        });\n    }    \n\n    // ** disconnect from server\n    disconnect() { this.stream.close(); this.worker.terminate(); }\n    \n    // ** Connect + open Delta Stream (endpoint discovery)\n    connectStream(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        return new Promise( (resolve, reject)=> {\n            this.connect(hostname, port, useSSL)\n            .then( ()=> { \n                // ** connect to stream api at preferred version else fall back to default version\n                let url= this.resolveStreamEndpoint();\n                if(!url) { \n                    reject( new Error('Server has no advertised Stream endpoints!') );\n                    return;\n                }\n                this.stream.open(url, subscribe);\n                resolve( true );\n            })\n            .catch( e=> { reject( e ) });\n        });\n    } \n\n    // ** connect to playback stream (endpoint discovery)\n    connectPlayback(hostname:string=null, port:number=null, useSSL:boolean=false, options:any) {\n        return new Promise( (resolve, reject)=> {\n            this.connect(hostname, port, useSSL)\n            .then( ()=> { \n                // ** connect to playback api at preferred version else fall back to default version\n                this.openPlayback(null, options, this._token);\n                resolve( true );\n            })\n            .catch( e=> { reject( e ) });\n        })\n    }      \n\n    // ** connect to delta stream with (NO endpoint discovery)\n    openStream(url:string=null, subscribe?:string, token?:string) {\n        this.debug('openStream.........');  \n        if(!url) {     // connect to stream api at discovered endpoint\n            url= this.resolveStreamEndpoint();\n            if(!url) { \n                return( new Error('Server has no advertised Stream endpoints!') );\n            }\n        }\n        this.stream.open(url, subscribe, token);  \n        return true;      \n    }   \n\n    // ** connect to playback stream (NO endpoint discovery)\n    openPlayback(url:string=null, options?:any, token?:string) {\n        this.debug('openPlayback.........');\n        if(!url) {     // connect to stream api at discovered endpoint\n            url= this.resolveStreamEndpoint();\n            if(!url) { \n                return( new Error('Server has no advertised Stream endpoints!') );\n            }\n            url= url.replace('stream', 'playback');\n        }        \n        let pb= '';\n        let subscribe: string;\n        if(options && typeof options ==='object'){\n            pb+= (options.startTime) ? '?startTime=' + options.startTime.slice(0,options.startTime.indexOf('.')) + 'Z' : '';\n            pb+= (options.playbackRate) ? `&playbackRate=${options.playbackRate}` : '';\n            subscribe= (options.subscribe) ? options.subscribe : null;            \n        }\n        this.stream.open(url + pb, subscribe, token); \n        return true;\n    }      \n\n    // ** process Hello response \n    private processHello(response: any) {\n        this.server.endpoints= (response['endpoints']) ? response['endpoints'] : {};\n        this.server.info= (response['server']) ? response['server'] : {};\n        this.server.apiVersions= (this.server.endpoints) ? Object.keys(this.server.endpoints) : [];\n        this.debug(this.server.endpoints);\n    }\n\n    // ** return preferred WS stream url\n    public resolveStreamEndpoint():string {\n        if(this.server.endpoints[this._version] && this.server.endpoints[this._version]['signalk-ws']) {\n            this.debug(`Connecting endpoint version: ${this._version}`);\n            return `${this.server.endpoints[this._version]['signalk-ws']}`;\n        }\n        else if(this.server.endpoints['v1'] && this.server.endpoints['v1']['signalk-ws']) { \n            this.debug(`Connection falling back to: v1`);\n            return `${this.server.endpoints['v1']['signalk-ws']}` \n        }\n        else { return null }\n    }  \n\n    // ** return signalk-http endpoint url\n    private resolveHttpEndpoint():string {\n        let url: string;\n        if(this.server.endpoints[this._version]) { // ** connection made\n            // ** connect to http endpoint at prescribed version else fall back to default version\n            if(this.server.endpoints[this._version]['signalk-http']) {\n                url= `${this.server.endpoints[this._version]['signalk-http']}`;\n            }\n            else { url= `${this.server.endpoints['v1']['signalk-http']}` }   \n        } \n        else {\n            let msg= 'No current connection http endpoint service! Use connect() to establish a connection.'\n            this.debug(msg);\n        } \n        return url;   \n    }    \n    \n    // ** cleanup on server disconnection\n    private disconnectedFromServer() {\n        this.server.endpoints= {};\n        this.server.info= {};\n        this.server.apiVersions= [];  \n    }\n\n    //** return observable response from http path\n    get(path:string) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`get ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }        \n    };  \n\n    //** return observable response for put to http path\n    put(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`put ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, { headers: headers } );\n        }\n        else { return this.http.put(url, value) }        \n    };\n\n    //** return observable response for post to http path\n    post(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`post ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.post( url, { headers: headers } );\n        }\n        else { return this.http.post(url, value) }        \n    };   \n\n    // ** get auth token for supplied user details **\n    login(username:string, password:string) {\n        let headers= new HttpHeaders().set('Content-Type', `application/json`);\n        return this.http.post(\n            `${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/login`,\n            { \"username\": username, \"password\": password },\n            { headers }\n        );\n    }\n\t\n    // ** logout from server **\n    logout() {\n\t\tlet url=`${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/logout`;\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, null, { headers } );\n        }        \n        else { return this.http.put( url, null ) }\n    }\t   \n    \n    //** get data via the snapshot http api path for supplied time\n    snapshot(context:string, time:string) { \n        if(!time) { return }\n        time= time.slice(0,time.indexOf('.')) + 'Z';\n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        url= `${url.replace('api','snapshot')}${Path.contextToPath(context)}?time=${time}`;\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }\n    }\n\n}\n","/*****************************\r\n * SignalKClient Module:\r\n *****************************/\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule} from '@angular/common/http';\r\n\r\n@NgModule({\r\n    imports: [ HttpClientModule ],    \r\n    declarations: [],\r\n    exports: [],\r\n    entryComponents: [], \r\n    providers: []  \r\n})\r\nexport class SignalKClientModule {}\r\n\r\nexport * from './signalk-client';"],"names":["HttpHeaders","Injectable","HttpClient","Subject","isDevMode","NgModule","HttpClientModule"],"mappings":"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"}
