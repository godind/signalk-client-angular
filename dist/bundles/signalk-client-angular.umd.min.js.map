{"version":3,"sources":["ng://signalk-client-angular/lib/signalk-client.ts"],"names":["SignalKClient","http","this","never","forwrite","always","authRequired","endpoints","info","apiVersions","ws","self","roles","_connect","Subject","onConnect","asObservable","_close","onClose","_error","onError","_message","onMessage","init","prototype","debug","val","isDevMode","console","log","Object","defineProperty","parseInt","_version","slice","v","server","length","indexOf","_token","login","username","password","headers","HttpHeaders","set","post","protocol","hostname","port","logout","url","put","_wsTimeout","useSSL","wsProtocol","processHello","response","keys","_authType","getStreamUrl","hello","get","connect","subscribe","_this","connectDeltaByUrl","next","Error","error","connectDelta","playback","replace","parsePlaybackOptions","connectPlayback","opt","s","context","startTime","playbackRate","disconnect","WebSocket","setTimeout","readyState","onopen","e","onclose","onerror","onmessage","data","JSON","parse","isHello","_filter","isDelta","close","send","stringify","sendUpdate","path","value","updates","values","options","_i","arguments","subscription","i","isNaN","push","unsubscribe","msg","version","id","getSelfId","uuid","RegExp","test","raiseAlarm","alarmPath","alarm","clearAlarm","getSelf","apiGet","getMeta","contextToPath","dotToSlash","resolveHttpEndpoint","Authorization","apiPut","key","snapshot","time","split","join","slashToDot","Injectable","args","providedIn","HttpClient","normal","alert","warn","emergency","visual","sound","Alarm","message","AlarmState","AlarmMethod"],"mappings":"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","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalKClient {\n\n\tprivate _connect; \t\t\t\n    public onConnect;\t \t\t\n\tprivate _close; \t\t\t\n    public onClose;\t \t\t    \n\tprivate _error; \t\t\t\n    public onError;\t \t\t    \n\tprivate _message; \t\t\t\n    public onMessage;\t \t\t  \n    private ws;                           \n    \n    private hostname: string;\n    private port: number;\n    private protocol: string;\n    private wsProtocol: string;\n\n    private _version: string= 'v1';      // ** default Signal K api version\n    private _filter= null;               // ** id of vessel to filter delta messages\n    private _wsTimeout= 20000;           // ** websocket connection timeout\n    private _token: string;             // token for when security is enabled on the server\n\n\tprivate _authType= {never: 0, forwrite: 1, always: 2};\n    // ** server information block **\n    public server= {\n        authRequired: 0,\t\t\t// 0= 'never', 1= 'forwrite\n        endpoints: {},\n        info: {},\n        apiVersions: [],\n        ws: { self: null, roles: {} }\n    }\n\n    private debug(val: any) { if(isDevMode()){ console.log(val) } }\n\n    constructor( private http: HttpClient ) { \n        this._connect= new Subject<string>();\n        this.onConnect= this._connect.asObservable();   \n        this._close= new Subject<string>();\n        this.onClose= this._close.asObservable();  \n        this._error= new Subject<string>();\n        this.onError= this._error.asObservable();  \n        this._message= new Subject<string>();\n        this.onMessage= this._message.asObservable();   \n        this.init();                          \n    }\n\n    // **************** Signal K API VERSION ***************************\n\n    // ** get / set Signal K preferred api version to use **\n    get version():number { return parseInt( this._version.slice(1) ) }\n\n    set version(val: number) {\n        let v:string= 'v'+ val;\n        if(this.server.apiVersions.length==0) { \n            this._version= v;\n            this.debug(`Signal K api version set to: ${v}`);\n        }\n        else {\n            this._version= (this.server.apiVersions.indexOf(v)!=-1) ? v : this._version;\n            this.debug(`Signal K api version set request: ${v}, result: ${this._version}`);\n        }\n    }\n    // ** get list of api versions supported by server\n    get apiVersions() { return this.server.apiVersions }\n\n    // **************** CONNECTION  ***************************\n\n    // ** is WS Stream connected\n    get isConnected() { return (this.ws) ? true : false }\n\n    // ** is Auth required for this server **\n    get authRequired() { return this.server.authRequired }\n\n    // ** set auth token value **\n    set authToken(val:string) { this._token= val }\n\n    // ** get auth token for supplied user details **\n    login(username:string, password:string) {\n        let headers= new HttpHeaders().set('Content-Type', `application/json`);\n        return this.http.post(\n            `${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/login`,\n            { \"username\": username, \"password\": password },\n            { headers }\n        );\n    }\n\t\n    // ** logout from server **\n    logout() {\n\t\tlet url=`${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/logout`;\n\t\tif(this._token) { url+= `&token=${this._token}` }     \n        return this.http.put(\n            url,\n            {}\n        );\n    }\t\n\n    // ** get / set websocket connection timeout 3000<=timeout<=60000 **\n    get connectionTimeout():number { return this._wsTimeout }\n\n    set connectionTimeout(val: number) {\n        this._wsTimeout= (val<3000) ? 3000 : (val>60000) ? 60000 : val;\n    }    \n\n    // ** initialise client connection settings\n    private init(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        if(isDevMode()) { \n            hostname= hostname || '192.168.99.100';\n            port= port || 3000;  \n        }\n        else { hostname= hostname || 'localhost' }\n\n        this.hostname = hostname;\n        if(useSSL) {\n            this.protocol = 'https';\n            this.wsProtocol = 'wss';\n            this.port = port || 443;\n        } \n        else {\n            this.protocol = 'http';\n            this.wsProtocol = 'ws';\n            this.port = port || 80;\n        }        \n    }\n\n    // ** process Hello response \n    private processHello(response) {\n        this.server.endpoints= (response['endpoints']) ? response['endpoints'] : {};\n        this.server.info= (response['server']) ? response['server'] : {};\n        this.server.apiVersions= (this.server.endpoints) ? Object.keys(this.server.endpoints) : [];\n        this.server.authRequired=(response['authenticationRequired']) ? \n            this._authType[ response['authenticationRequired'] ] : 0;\n        this.debug(this.server.endpoints);\n    }\n\n    // ** return preferred WS stream url\n    private getStreamUrl() {\n        if(this.server.endpoints[this._version] && this.server.endpoints[this._version]['signalk-ws']) {\n            this.debug(`Connecting endpoint version: ${this._version}`);\n            return `${this.server.endpoints[this._version]['signalk-ws']}`;\n        }\n        else if(this.server.endpoints['v1'] && this.server.endpoints['v1']['signalk-ws']) { \n            this.debug(`Connection falling back to: v1`);\n            return `${this.server.endpoints['v1']['signalk-ws']}` \n        }\n        else { return null }\n    }\n\n    // ** Signal K server discovery request (/signalk).  \n    hello(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        this.init(hostname, port, useSSL);\n        return this.get('/signalk');\n    }    \n    \n    // ** connect to server\n    connect(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        this.debug('Contacting Signal K server.........');\n        this.hello(hostname, port, useSSL).subscribe(    // ** discover endpoints **\n            response=> {\n                this.processHello(response);\n                // ** connect to stream api at preferred version else fall back to default version\n                let url= this.getStreamUrl();\n                if(!url) { \n                    this._error.next( new Error('No Signal K endpoints found!') );\n                    return;\n                }\n                // ** subscribe **\n                if(subscribe) { url+=`?subscribe=${subscribe}` } \n                if(this._token) { url+= `&token=${this._token}` }               \n                this.debug(`Connecting to ${url}`);\n                this.connectDeltaByUrl(url);\n            },\n            error=> { \n                this.server.endpoints= {};\n                this.server.info= {};\n                this.server.apiVersions= [];            \n                return this._error.next( error );\n            }\n        );\n    }  \n\n    // ** connect to delta stream with no endpoint discovery\n    connectDelta(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        this.debug('ConnectDelta.........');\n        this.init(hostname, port, useSSL);\n        let url= `${this.wsProtocol}://${this.hostname}:${this.port}/signalk/${this._version}/stream`;\n        // ** subscribe **\n        if(subscribe) { url+=`?subscribe=${subscribe}` } \n        if(this._token) { url+= `&token=${this._token}` }\n        this.debug(`Connecting to delta stream at ${url}`);\n        this.connectDeltaByUrl(url);\n    }  \n\n    // ** connect to server\n    playback(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:any) {\n        this.debug('Contacting Signal K server.........');\n        this.hello(hostname, port, useSSL).subscribe(    // ** discover endpoints **\n            response=> {\n                this.processHello(response);\n                // ** connect to stream api at preferred version else fall back to default version\n                let url= this.getStreamUrl();\n                if(!url) { \n                    this._error.next( new Error('No Signal K endpoints found!') );\n                    return;\n                }    \n                url= url.replace('stream','playback');       \n                // ** subscribe **\n                if(typeof subscribe ==='string') { url+=`?subscribe=${subscribe}` } \n                if(typeof subscribe ==='object') { \n                    url+=`?subscribe=${this.parsePlaybackOptions(subscribe)}`;\n                } \n                if(this._token) { url+= `&token=${this._token}` }               \n                this.debug(`Connecting to ${url}`);\n                this.connectDeltaByUrl(url);\n            },\n            error=> { \n                this.server.endpoints= {};\n                this.server.info= {};\n                this.server.apiVersions= [];            \n                return this._error.next( error );\n            }\n        );\n    }  \n\n    // ** connect to playback stream \n    connectPlayback(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:any) {\n        this.debug('Playback.........');\n        this.init(hostname, port, useSSL);\n        let url= `${this.wsProtocol}://${this.hostname}:${this.port}/signalk/${this._version}/playback`;\n        // ** subscribe **\n        if(typeof subscribe ==='string') { url+=`?subscribe=${subscribe}` } \n        if(typeof subscribe ==='object') { \n            url+=`?subscribe=${this.parsePlaybackOptions(subscribe)}`;\n        } \n        if(this._token) { url+= `&token=${this._token}` }\n        this.debug(`Connecting to playback stream at ${url}`);\n        this.connectDeltaByUrl(url);\n    }      \n\n    // ** parse playback options into query string\n    private parsePlaybackOptions(opt) {\n        let s='';\n        if(opt.context) { s+= opt.context }\n        if(opt.startTime) { \n            let t= opt.startTime.slice(0,opt.startTime.indexOf('.')) + 'Z';\n            s+= `&startTime=${t}` \n        }\n        if(opt.playbackRate) { s+= `&playbackRate=${opt.playbackRate}` }\n        return s;\n    }\n\n\t// ** connect to delta stream at provided url\n\tprivate connectDeltaByUrl(url) {\n        if(this.server.authRequired && !this._token) {\n            this.debug('Auth Required and NO token available!');\n            this._error.next(new Error('Auth Required and NO token available!'));\n        }\n        if(this.ws) { this.disconnect() }\n        this.ws = new WebSocket(url);\n        // ** start connection watchdog **\n        setTimeout( \n            ()=>{\n                if(this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) { \n                    this.debug(`Connection watchdog expired (${this._wsTimeout/1000} sec): ${this.ws.readyState}... aborting connection...`);\n                    this.disconnect(); \n                }\n            }, this._wsTimeout\n        );\n\t\t\n\t\tthis.ws.onopen= e=> { this.debug(`ws.open`); this._connect.next(e) }\n\t\tthis.ws.onclose= e=> { this.debug(`ws.close`); this._close.next(e) }\n\t\tthis.ws.onerror= e=> { this.debug(`ws.error`); this._error.next(e) }\n\t\tthis.ws.onmessage= e=> {\n            let data;\n            if(typeof e.data === 'string') {\n                try { data= JSON.parse(e.data) }\n                catch(e) { return }\n            }\n            if(this.isHello(data)) {\n                this.server.ws.roles= data.roles;\n                this.server.ws.self= data.self;\n            }          \n\t\t\tif(this._filter && this.isDelta(data)) {\n                if(data.context== this._filter) { this._message.next(data) } \n            }\n            else { this._message.next(data) }\n\t\t}\n    }  \n\n    // ** disconnect from Signal K stream\n    disconnect() {\n        if(this.ws) {\n            this.ws.close();\n            this.ws= null;\n            this.server.ws= { self: null, roles: {} };\n        }\n    }\n\n\n    // **************** STREAM API ***************************\n\n    // ** send data to Signal K stream\n    send(data:any) {\n        if(this.ws) {\n            if(typeof data === 'object') { data= JSON.stringify(data) }\n            this.ws.send(data);\n        }\n    }\n\n    // ** send value via delta stream update **\n    sendUpdate(context:string='self', path:string, value:any) {\n        let val= { \n            context: (context=='self') ? 'vessels.self' : context,\n            updates: [ {\n                values: [{ path: path, value: value }] \n            } ] \n        }\n        this.debug(`sending update: ${JSON.stringify(val)}`);\n        this.send(val);\n    }\n\n    // ** Subscribe to Delta stream messages **\n    subscribe(context:string='*', path:string='*', ...options) {\n        let data= {\n            context: (context=='self') ? 'vessels.self' : context,\n            subscribe: []\n        };\n\n        let subscription= {};\n        subscription['path']= path;\n        for(let i in options) {\n            switch(i) {\n                case '0': \n                    if( !isNaN(options[i]) ) { subscription['period']= parseInt(options[i]) }\n                    break;\n                case '1': \n                    if( options[i]=='delta' || options[i]=='full') { \n                        subscription['format']= options[i] \n                    }\n                    break;\n                case '2': \n                    if( options[i]=='instant' || options[i]=='ideal' \n                            || options[i]== 'fixed' ) {\n                                subscription['policy']= options[i];\n                    }\n                    break;     \n                case '3': \n                    if(subscription['policy']=='instant') {\n                        if( !isNaN(options[i]) ) { subscription['minPeriod']= parseInt(options[i]) } \n                    }\n                    break;\n            }\n        }\n        data.subscribe.push(subscription);\n        this.send(data);        \n    }\n\n    // ** Unsubscribe from Delta stream messages **\n    unsubscribe(context:string='*', path:string='*') {\n        context= (context=='self') ? 'vessels.self' : context;\n        this.send({\n            \"context\": context,\n            \"unsubscribe\": [ {\"path\": path} ]\n        });\n    }\n\n    // ** returns true if recieved message is a Delta message\n    isDelta(msg) { return typeof msg.context!= 'undefined' }\n    // ** returns true if recieved message is a Hello message\n    isHello(msg) { return typeof msg.version!= 'undefined' }\n\n\n    // ** get / set filter to select delta messages just for supplied vessel id   \n    get filter(): string { return this._filter }\n    // ** set filter= null to remove message filtering\n    set filter(id:string) { \n        if(!id) {   // ** clear filter\n            this._filter=null;\n            return;\n        }\n        if( id.indexOf('self')!=-1 ) {  // ** self\n            if(!this.server.ws.self) {\n                this.getSelfId().subscribe( id=> { this._filter= id } );\n            }\n            else { this._filter= this.server.ws.self }\n        }\n        else {  // ** uuid\n            let uuid= RegExp(\"^urn:mrn:signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$\")\n            if(id.indexOf('vessels.')!=-1) { id= id.slice(id.indexOf('.')+1) }\n            if(uuid.test(id)) { this._filter= `vessels.${id}` }\n        }\n    }\n\n    // ** Raise an alarm message **\n    raiseAlarm(context:string='self', alarmPath:string, alarm:Alarm) {\n        this.sendUpdate(context, `notifications.${alarmPath}`, alarm);\n    }\n\n    // ** Clear alarm **\n    clearAlarm(context:string='self', alarmPath:string) {\n        this.sendUpdate(context, `notifications.${alarmPath}`, null);\n    } \n            \n\n    // **************** HTTP API ***************************\n    \n    // ** Returns the contents of the Signal K tree pointed to by self\n    getSelf() { return this.apiGet(`vessels/self`) }\n\n    // ** Returns the self identity\n    getSelfId() { return this.apiGet(`self`) }\n\n    // ** return observable response for meta object at the specified context and path\n    getMeta(context:string, path:string) { \n        return this.apiGet(`${this.contextToPath(context)}/${this.dotToSlash(path)}/meta`);\n    }    \n\n    //** return observable response from http api path\n    apiGet(path:string) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(path[0]=='/') { path= path.slice(1) }\n        url+= this.dotToSlash(path);\n        this.debug(`apiGet ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }              \n            return this.http.get(url);\n        }\n    }\n\n    //** Send value to http api path\n\tapiPut(context:string, path:string, value:any);\n\tapiPut(context:string, path:string, key:any, value:any);\n\t\n    apiPut(context:string, path:string, key?:any, value?:any) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(path[0]=='/') { path= path.slice(1) }\n        url+= this.contextToPath(context) + '/' + this.dotToSlash(path);\n\n        let msg = { value: {} } \n        if(typeof value=='undefined') { msg.value= key }\n\t\telse { msg.value[key]= value }\n\n        this.debug(`apiPut ${url}`);\n        this.debug(JSON.stringify(msg));\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put(url, msg, { headers: headers } );\n        }        \n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }              \n            return this.http.put(url, msg); \n        }\n    }    \n\n    //** get data via the snapshot http api path for supplied time\n    snapshot(context:string, time:string) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(!time) { return }\n        time= time.slice(0,time.indexOf('.')) + 'Z';\n        url= `/signalk/${this._version}/snapshot/${this.contextToPath(context)}?time=${time}`;\n        this.debug(`snapshot ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }              \n            return this.http.get(url);\n        }\n    }\n    \n    //** return observable response from http path\n    get(path:string) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${this.dotToSlash(path)}`;\n        this.debug(`get ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }           \n            return this.http.get(url);\n        }        \n    };  \n\n    //** return observable response for put to http path\n    put(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${this.dotToSlash(path)}`;\n        this.debug(`put ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }           \n            return this.http.put(url, value);\n        }        \n    };\n\n    //** return observable response for post to http path\n    post(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${this.dotToSlash(path)}`;\n        this.debug(`post ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.post( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }           \n            return this.http.post(url, value);\n        }        \n    };    \n\n    // ** return url for connected signalk-http endpoint\n    private resolveHttpEndpoint() {\n        let url;\n        if(this.server.endpoints[this._version]) { // ** connection made\n            // ** connect to http endpoint at prescribed version else fall back to default version\n            if(this.server.endpoints[this._version]['signalk-http']) {\n                url= `${this.server.endpoints[this._version]['signalk-http']}`;\n            }\n            else { url= `${this.server.endpoints['v1']['signalk-http']}` }   \n        } \n        else {\n            let msg= 'No current connection http endpoint service! Use connect() to establish a connection.'\n            this.debug(msg);\n            this._error.next(new Error(msg) );\n        } \n        return url;   \n    }\n\n    // ** parse context to valid Signal K path\n    private contextToPath(context:string) {\n        let res= (context=='self' ) ? 'vessels.self': context;\n        return res.split('.').join('/');\n    }\n\n    // ** transform dot notation to slash\n    private dotToSlash(path:string) {\n        if(path.indexOf('.')!=-1) {\n            return path.split('.').join('/');\n        }\n        else { return path }\n    }\n\n    // ** transform slash notation to dot\n    private slashToDot(path:string) {\n        if(path.indexOf('/')!=-1) {\n            return path.split('/').join('.');\n        }\n        else { return path }\n    }    \n\n}\n\n// ** Alarm state **\nexport enum  AlarmState {\n    normal='normal',\n    alert='alert',\n    warn='warn',\n    alarm='alarm',\n    emergency='emergency'\n}\n\n// ** Alarm Method **\nexport enum  AlarmMethod {\n    visual='visual',\n    sound='sound'\n}\n\n// ** Alarm class\nexport class Alarm {\n    state: AlarmState= AlarmState.normal;\n    method: Array<AlarmMethod>= [AlarmMethod.visual, AlarmMethod.sound];\n    message: string;\n\n    constructor(message:string=null) { this.message= message }\n}\n\n\n"]}