{"version":3,"sources":["ng://signalk-client-angular/lib/uuid.ts","ng://signalk-client-angular/lib/utils.ts","ng://signalk-client-angular/lib/http-api.ts","ng://signalk-client-angular/lib/stream-api.ts","ng://signalk-client-angular/lib/stream-worker.ts","ng://signalk-client-angular/lib/signalk-client.ts","ng://signalk-client-angular/lib/signalk-client.module.ts"],"names":["UUID","this","limitUI04","maxFromBits","limitUI06","limitUI08","limitUI12","limitUI14","limitUI16","limitUI32","limitUI40","limitUI48","create","prototype","toString","hex","toURN","toSignalK","toBytes","parts","split","ints","intPos","i","length","j","parseInt","substr","bits","Math","pow","getRandomInt","min","max","floor","random","randomUI04","randomUI06","randomUI08","randomUI12","randomUI14","randomUI16","randomUI32","randomUI40","randomUI48","fromParts","paddedString","string","z","String","timeLow","timeMid","timeHiAndVersion","clockSeqHiAndReserved","clockSeqLow","node","version","Path","dotToSlash","path","p","indexOf","join","contextToPath","context","Message","updates","subscribe","unsubscribe","request","requestId","Alarm","message","state","visual","sound","_method","_message","_state","AlarmState","alarm","push","AlarmMethod","Object","defineProperty","method","normal","alert","warn","emergency","SignalKHttp","http","val","_token","getSelf","get","getSelfId","getMeta","endpoint","slice","url","headers","HttpHeaders","Authorization","put","c","k","v","msg","value","t","r","server","id","v_1","JSON","parse","stringify","post","delete","Injectable","args","providedIn","HttpClient","SignalKStream","_filter","_wsTimeout","_playbackMode","_source","_connect","Subject","onConnect","asObservable","_close","onClose","_error","onError","onMessage","ws","readyState","selfId","close","open","token","_this","q","WebSocket","setTimeout","console","onopen","e","next","onclose","onerror","onmessage","parseOnMessage","data","isHello","self","startTime","isResponse","login","isDelta","sendRequest","keys","forEach","send","username","password","sendUpdate","uValues","Array","isArray","u","timestamp","Date","toISOString","values","options","sValue","raiseAlarm","alarmId","n","clearAlarm","name","isSelf","SignalKStreamWorker","ngOnDestroy","worker","terminate","undefined","init","pathToFile","Worker","event","postMessage","SignalKClient","api","stream","_version","endpoints","info","apiVersions","debug","isDevMode","log","authToken","hostname","port","useSSL","protocol","hello","connect","Promise","resolve","reject","response","processHello","resolveHttpEndpoint","resolveStreamEndpoint","error","disconnectedFromServer","disconnect","connectStream","then","Error","catch","connectPlayback","openPlayback","openStream","replace","pb","playbackRate","set","logout","snapshot","time","SignalKClientModule","NgModule","imports","HttpClientModule","declarations","exports","entryComponents","providers","mob","fire","sinking","flooding","collision","grounding","listing","adrift","piracy","abandon"],"mappings":"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","sourcesContent":["/*\r\n * UUID: A js library to generate and parse UUIDs, TimeUUIDs and generate\r\n * TimeUUID based on dates for range selections.\r\n * @see http://www.ietf.org/rfc/rfc4122.txt\r\n **/\r\nexport class UUID {\r\n\r\n    private limitUI04;\r\n    private limitUI06;\r\n    private limitUI08;\r\n    private limitUI12;\r\n    private limitUI14;\r\n    private limitUI16;\r\n    private limitUI32;\r\n    private limitUI40;\r\n    private limitUI48;\r\n\r\n    private version:number;\r\n    private hex:string;\r\n\r\n    constructor() {\r\n        this.limitUI04 = this.maxFromBits(4);\r\n        this.limitUI06 = this.maxFromBits(6);\r\n        this.limitUI08 = this.maxFromBits(8);\r\n        this.limitUI12 = this.maxFromBits(12);\r\n        this.limitUI14 = this.maxFromBits(14);\r\n        this.limitUI16 = this.maxFromBits(16);\r\n        this.limitUI32 = this.maxFromBits(32);\r\n        this.limitUI40 = this.maxFromBits(40);\r\n        this.limitUI48 = this.maxFromBits(48); \r\n\r\n        this.create();\r\n    }\r\n\r\n    toString() { return this.hex }\r\n    toURN() { return 'urn:uuid:' + this.hex }\r\n    toSignalK():string  { return `urn:mrn:signalk:uuid:${this.hex}` }\r\n    toBytes() {\r\n        let parts = this.hex.split('-');\r\n        let ints = [];\r\n        let intPos = 0;\r\n        for (let i = 0; i < parts.length; i++) {\r\n            for (let j = 0; j < parts[i].length; j+=2) {\r\n            ints[intPos++] = parseInt(parts[i].substr(j, 2), 16);\r\n            }\r\n        }\r\n        return ints;\r\n    };    \r\n\r\n    private maxFromBits(bits) { return Math.pow(2, bits) };\r\n\r\n    private getRandomInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min }\r\n\r\n    private randomUI04() { return this.getRandomInt(0, this.limitUI04-1) }\r\n    private randomUI06() { return this.getRandomInt(0, this.limitUI06-1);}\r\n    private randomUI08() { return this.getRandomInt(0, this.limitUI08-1) }\r\n    private randomUI12() { return this.getRandomInt(0, this.limitUI12-1) }\r\n    private randomUI14() { return this.getRandomInt(0, this.limitUI14-1) }\r\n    private randomUI16() { return this.getRandomInt(0, this.limitUI16-1) }\r\n    private randomUI32() { return this.getRandomInt(0, this.limitUI32-1) }\r\n    private randomUI40() { return (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << 40 - 30)) * (1 << 30) }\r\n    private randomUI48() { return (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << 48 - 30)) * (1 << 30) }\r\n\r\n    private create() {\r\n        this.fromParts(\r\n            this.randomUI32(),\r\n            this.randomUI16(),\r\n            0x4000 | this.randomUI12(),\r\n            0x80   | this.randomUI06(),\r\n            this.randomUI08(),\r\n            this.randomUI48()\r\n        );\r\n    };\r\n\r\n    private paddedString(string, length, z=null) {\r\n        string = String(string);\r\n        z = (!z) ? '0' : z;\r\n        let i = length - string.length;\r\n        for (; i > 0; i >>>= 1, z += z) {\r\n            if (i & 1) {\r\n            string = z + string;\r\n            }\r\n        }\r\n        return string;\r\n    };\r\n\r\n    private fromParts(timeLow, timeMid, timeHiAndVersion, clockSeqHiAndReserved, clockSeqLow, node) {\r\n        this.version = (timeHiAndVersion >> 12) & 0xF;\r\n        this.hex = this.paddedString(timeLow.toString(16), 8)\r\n            + '-'\r\n            + this.paddedString(timeMid.toString(16), 4)\r\n            + '-'\r\n            + this.paddedString(timeHiAndVersion.toString(16), 4)\r\n            + '-'\r\n            + this.paddedString(clockSeqHiAndReserved.toString(16), 2)\r\n            + this.paddedString(clockSeqLow.toString(16), 2)\r\n            + '-'\r\n            + this.paddedString(node.toString(16), 12);\r\n        return this;\r\n    };    \r\n    \r\n    /*\r\n    private getTimeFieldValues(time) {\r\n        let ts = time - Date.UTC(1582, 9, 15);\r\n        let hm = ((ts / 0x100000000) * 10000) & 0xFFFFFFF;\r\n        return { low: ((ts & 0xFFFFFFF) * 10000) % 0x100000000,\r\n                mid: hm & 0xFFFF, hi: hm >>> 16, timestamp: ts };\r\n    };\r\n\r\n    fromTime(time, last:boolean) {\r\n        last = (!last) ? false : last;\r\n        let tf = this.getTimeFieldValues(time);\r\n        let tl = tf.low;\r\n        let thav = (tf.hi & 0xFFF) | 0x1000;  // set version '0001'\r\n        if (last === false) {\r\n            return new UUID().fromParts(tl, tf.mid, thav, 0, 0, 0);\r\n        } else {\r\n            return new UUID().fromParts(tl, tf.mid, thav, 0x80 | this.limitUI06, this.limitUI08 - 1, this.limitUI48 - 1);\r\n        }\r\n    };\r\n\r\n    firstFromTime(time) { return this.fromTime(time, false) }\r\n    lastFromTime(time) { return this.fromTime(time, true) }\r\n    \r\n    \r\n    equals(uuid) {\r\n        if (!(uuid instanceof UUID)) { return false }\r\n        if (this.hex !== uuid.hex) { return false }\r\n        return true;\r\n    };\r\n\r\n    fromURN(strId) {\r\n        let r;\r\n        let p = /^(?:urn:uuid:|\\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(?:\\})?$/i;\r\n        if ((r = p.exec(strId))) {\r\n            return this.fromParts(\r\n                parseInt(r[1], 16), parseInt(r[2], 16),\r\n                parseInt(r[3], 16), parseInt(r[4], 16),\r\n                parseInt(r[5], 16), parseInt(r[6], 16)\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    fromBytes(ints) {\r\n        if (ints.length < 5) { return null }\r\n        let str = '';\r\n        let pos = 0;\r\n        let parts = [4, 2, 2, 2, 6];\r\n        for (let i = 0; i < parts.length; i++) {\r\n            for (let j = 0; j < parts[i]; j++) {\r\n            let octet = ints[pos++].toString(16);\r\n            if (octet.length == 1) {\r\n                octet = '0' + octet;\r\n            }\r\n            str += octet;\r\n            }\r\n            if (parts[i] !== 6) {\r\n            str += '-';\r\n            }\r\n        }\r\n        return this.fromURN(str);\r\n    };\r\n\r\n    fromBinary(binary) {\r\n        let ints = [];\r\n        for (let i = 0; i < binary.length; i++) {\r\n            ints[i] = binary.charCodeAt(i);\r\n            if (ints[i] > 255 || ints[i] < 0) {\r\n            throw new Error('Unexpected byte in binary data.');\r\n            }\r\n        }\r\n        return this.fromBytes(ints);\r\n    };\r\n    */\r\n\r\n};","import { UUID } from './uuid';\r\n\r\n// ** Path utilities\r\nexport class Path {\r\n\r\n    // ** transform dot notation to slash\r\n    static dotToSlash(path:string):string {\r\n        let p= path.split('?');\r\n        if(p[0].indexOf('.')!=-1) { \r\n            p[0]= p[0].split('.').join('/');\r\n        }\r\n        return p.join('?');\r\n    }\r\n\r\n    // ** parse context to valid Signal K path\r\n    static contextToPath(context:string):string {\r\n        let res= (context=='self' ) ? 'vessels.self': context;\r\n        return res.split('.').join('/');\r\n    }    \r\n\r\n}\r\n\r\n// ** Message templates **\r\nexport class Message {\r\n   \r\n    // ** return UPDATES message object\r\n    static updates() { \r\n        // array values= { values: [ {path: xx, value: xx } ] }\r\n        return { \r\n            context: null,\r\n            updates: [] \r\n        }\r\n    }\r\n    // ** return SUBSCRIBE message object\r\n    static subscribe() { \r\n        /* array values= {\r\n            \"path\": \"path.to.key\",\r\n            \"period\": 1000,\r\n            \"format\": \"delta\",\r\n            \"policy\": \"ideal\",\r\n            \"minPeriod\": 200\r\n            } */\r\n        return { \r\n            context: null,\r\n            subscribe: [] \r\n        }\r\n    }    \r\n    // ** return UNSUBSCRIBE message object\r\n    static unsubscribe() { \r\n        // array values= { \"path\": \"path.to.key\" }\r\n        return { \r\n            context: null,\r\n            unsubscribe: [] \r\n        }\r\n    }  \r\n    // ** return REQUEST message object\r\n    static request() { \r\n        return { \r\n            requestId: new UUID().toString()\r\n        }\r\n    }           \r\n\r\n}\r\n\r\n// ** Alarm message **\r\nexport class Alarm {\r\n\r\n    private _state:AlarmState;\r\n    private _method:Array<AlarmMethod>= [];\r\n    private _message:string='';\r\n\r\n    constructor(message:string, state?:AlarmState, visual?:boolean, sound?:boolean) {\r\n        this._message= (typeof message!== 'undefined') ? message : '';\r\n        this._state= (typeof state!== 'undefined') ? state : AlarmState.alarm;\r\n        if(visual) { this._method.push(AlarmMethod.visual)};\r\n        if(sound) { this._method.push(AlarmMethod.sound)};\r\n    }\r\n\r\n    get value() {\r\n        return {\r\n            message: this._message,\r\n            state: this._state,\r\n            method: this._method\r\n        }\r\n    }  \r\n}\r\n\r\nexport enum AlarmState {\r\n    normal= 'normal',\r\n    alert= 'alert',\r\n    warn= 'warn',\r\n    alarm= 'alarm',\r\n    emergency= 'emergency'\r\n};\r\n\r\nexport enum AlarmMethod {\r\n    visual= 'visual',\r\n    sound= 'sound'\r\n};\r\n\r\nexport enum AlarmType {\r\n    mob= 'notifications.mob',\r\n    fire= 'notifications.fire',\r\n    sinking= 'notifications.sinking',\r\n    flooding= 'notifications.flooding',\r\n    collision= 'notifications.collision',\r\n    grounding= 'notifications.grounding',\r\n    listing= 'notifications.listing',\r\n    adrift= 'notifications.adrift',\r\n    piracy= 'notifications.piracy',\r\n    abandon= 'notifications.abandon'\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Path } from './utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKHttp {\r\n\r\n    private _token: string;\r\n\r\n    // **************** ATTRIBUTES ***************************\r\n    public server: any;\r\n    public endpoint: string;\r\n    // ** set auth token value **\r\n    set authToken(val:string) { this._token= val }    \r\n\r\n    // *******************************************************\r\n\r\n    constructor( private http: HttpClient ) { }   \r\n    \r\n    // ** get the contents of the Signal K tree pointed to by self. returns: Observable \r\n    getSelf() { return this.get(`vessels/self`) }\r\n\r\n    //** get ID of vessel self via http. returns: Observable \r\n    getSelfId() { return this.get(`self`) }\r\n\r\n    // ** return observable response for meta object at the specified context and path\r\n    getMeta(context:string, path:string) { \r\n        return this.get(`${Path.contextToPath(context)}/${Path.dotToSlash(path)}/meta`);\r\n    }    \r\n\r\n    //** get API path value via http. returns: Observable \r\n    get(path:string) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= this.endpoint + Path.dotToSlash(path);\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.get( url, { headers: headers } );\r\n        }\r\n        else { return this.http.get(url) }\r\n    }\r\n\r\n    //** send value to API path via http PUT. returns: Observable \r\n    put(path:string, value:any);\r\n\tput(context:string, path:string, value:any);\r\n    put(context:string, path:string, key:any, value:any);\r\n    put(c:string, p:any, k?:any, v?:any) { \r\n        if(!this.endpoint) { return }\r\n        let context:string;\r\n        let path:string;\r\n        let msg = { value: {} } \r\n        // ** path / value\r\n        if(typeof k=='undefined' && typeof v=='undefined') {\r\n            if(c[0]=='/') { c= c.slice(1) }\r\n            path= Path.dotToSlash(c);\r\n            context= '';\r\n            msg.value= p;\r\n        }\r\n        // ** context / path / value\r\n        else if(typeof v=='undefined') { \r\n            context= (c) ? Path.contextToPath(c) : '';\r\n            path=Path.dotToSlash(p);\r\n            msg.value= k;\r\n        }\r\n        else {  // ** context / path / key / value\r\n            context= (c) ? Path.contextToPath(c) : '';\r\n            let t= Path.dotToSlash(p).split('/');\r\n            t.push(k);\r\n            path= t.join('/');\r\n            msg.value= v;\r\n        }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        \r\n        // ** patch for node server PUT handling of resources\r\n        let r= path.split('/');\r\n        if(r[0]=='resources') { \r\n            context= '';  \r\n            if(this.server && this.server.id=='signalk-server-node') { // ** check for node server\r\n                // ** re-format value { uuid: { <resource_data> }}\r\n                let v= JSON.parse(JSON.stringify(msg.value));\r\n                msg.value= {}\r\n                msg.value[r[r.length-1]]=v;\r\n                // ** add self context and remove uuid from path\r\n                path= 'vessels/self/' + r.slice(0, r.length-1).join('/');\r\n            }\r\n        }\r\n        // ****************************************\r\n\r\n        context= (context) ? context + '/' : '';\r\n        let url= this.endpoint + context + Path.dotToSlash(path);\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.put(url, msg, { headers: headers } );\r\n        }        \r\n        else { return this.http.put(url, msg) }\r\n    } \r\n\r\n    //** send value to API path via http POST. returns: Observable \r\n    post(path:string, value:any) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= `${this.endpoint}${Path.dotToSlash(path)}`;\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.post(url, value, { headers: headers } );\r\n        }        \r\n        else { return this.http.post(url, value) }\r\n    }     \r\n\r\n    //** delete value from API path via http DELETE. returns: Observable \r\n    delete(path:string) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= `${this.endpoint}${Path.dotToSlash(path)}`;\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.delete(url, { headers: headers } );\r\n        }        \r\n        else { return this.http.delete(url) }\r\n    }      \r\n\r\n} ","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { Message, Alarm, AlarmType } from './utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKStream {\r\n\r\n\tprivate _connect: Subject<any>;\r\n    private _close: Subject<any>;\r\n\tprivate _error: Subject<any>;\r\n    private _message: Subject<any>;\r\n\r\n    private ws: any;    \r\n    private _filter= null;               // ** id of vessel to filter delta messages\r\n    private _wsTimeout= 20000;           // ** websocket connection timeout  \r\n    private _token: string;  \r\n    private _playbackMode: boolean= false;\r\n    \r\n   // **************** ATTRIBUTES ***************************\r\n\r\n    public onConnect: Observable<any>;\t\t\r\n    public onClose: Observable<any>;\t\r\n    public onError: Observable<any>; \t\r\n    public onMessage: Observable<any>;\r\n\r\n    public endpoint: string;\r\n    public selfId: string;\r\n    public _source: any= null;\r\n\r\n    // ** set source label for use in messages\r\n    set source(val:string) { \r\n        if(!this._source) { this._source= {} }\r\n        this._source['label']= val;\r\n    }\r\n\r\n    // ** set auth token value **\r\n    set authToken(val:string) { this._token= val }    \r\n    // ** get / set websocket connection timeout 3000<=timeout<=60000 **\r\n    get connectionTimeout():number { return this._wsTimeout }\r\n    set connectionTimeout(val:number) {\r\n        this._wsTimeout= (val<3000) ? 3000 : (val>60000) ? 60000 : val;\r\n    }   \r\n    // ** is WS Stream connected?\r\n    get isOpen():boolean { \r\n        return (this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) ? true : false;\r\n    }  \r\n    // ** get / set filter to select delta messages just for supplied vessel id   \r\n    get filter():string { return this._filter }\r\n    // ** set filter= null to remove message filtering\r\n    set filter(id:string) { \r\n        if( id && id.indexOf('self')!=-1 ) {  // ** self\r\n            this._filter= (this.selfId) ? this.selfId : null;\r\n        }\r\n        else { this._filter= id }\r\n    }   \r\n    // ** returns true if Playback Hello message\r\n    get playbackMode():boolean { return this._playbackMode }\r\n\r\n    // ******************************************************\r\n\r\n    constructor( ) { \r\n        this._connect= new Subject<any>();\r\n        this.onConnect= this._connect.asObservable();   \r\n        this._close= new Subject<any>();\r\n        this.onClose= this._close.asObservable();  \r\n        this._error= new Subject<any>();\r\n        this.onError= this._error.asObservable();  \r\n        this._message= new Subject<any>();\r\n        this.onMessage= this._message.asObservable();         \r\n    }   \r\n\r\n    // ** Close WebSocket connection\r\n    close() { if(this.ws) { this.ws.close(); this.ws= null; } }\r\n   \r\n\t// ** Open a WebSocket at provided url\r\n\topen(url:string, subscribe?:string, token?:string) {\r\n        url= (url) ? url : this.endpoint;\r\n        if(!url) { return }\r\n        let q= (url.indexOf('?')==-1) ? '?' : '&'\r\n        if(subscribe) { url+=`${q}subscribe=${subscribe}` } \r\n        if(this._token || token) { url+= `${(subscribe) ? '&' : '?'}token=${this._token || token}` } \r\n        \r\n        this.close();\r\n        this.ws = new WebSocket(url);\r\n        // ** start connection watchdog **\r\n        setTimeout( \r\n            ()=>{\r\n                if(this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) { \r\n                    console.warn(`Connection watchdog expired (${this._wsTimeout/1000} sec): ${this.ws.readyState}... aborting connection...`);\r\n                    this.close(); \r\n                }\r\n            }, this._wsTimeout\r\n        );\r\n\t\t\r\n\t\tthis.ws.onopen= e=> { this._connect.next(e) }\r\n\t\tthis.ws.onclose= e=> { this._close.next(e) }\r\n\t\tthis.ws.onerror= e=> { this._error.next(e) }\r\n\t\tthis.ws.onmessage= e=> {this.parseOnMessage(e) }\r\n    }  \r\n    \r\n    // ** parse received message\r\n    private parseOnMessage(e) {\r\n        let data: any;\r\n        if(typeof e.data === 'string') {\r\n            try { data= JSON.parse(e.data) }\r\n            catch(e) { return }\r\n        }\r\n        if(this.isHello(data)) { \r\n            this.selfId= data.self;\r\n            this._playbackMode= (typeof data.startTime!= 'undefined') ? true : false;                 \r\n            this._message.next(data);\r\n        }      \r\n        else if(this.isResponse(data)) { \r\n            if(typeof data.login !== 'undefined') {\r\n                if(typeof data.login.token !== 'undefined') { this._token= data.login.token }\r\n            }                \r\n            this._message.next(data);\r\n        }             \r\n        else if(this._filter && this.isDelta(data)) {\r\n            if(data.context== this._filter) { this._message.next(data) } \r\n        }                \r\n        else { this._message.next(data) } \r\n    }\r\n\r\n    // ** send request via Delta stream\r\n    sendRequest(value:any):string {\r\n        if(typeof value !== 'object') { return null }\r\n        let msg= Message.request();\r\n        if(typeof value.login === 'undefined' && this._token) { msg['token']= this._token }\r\n        let keys= Object.keys(value);\r\n        keys.forEach( k=> { msg[k]= value[k] });\r\n        this.send(msg);\r\n        return msg.requestId;\r\n    }\r\n\r\n    // ** send put request via Delta stream\r\n    put(context:string, path:string, value:any):string {\r\n        let msg= {\r\n            context: (context=='self') ? 'vessels.self' : context,\r\n            put: { path: path, value: value }\r\n        };\r\n        return this.sendRequest(msg);\r\n    }    \r\n\r\n    // ** get auth token for supplied user details **\r\n    login(username:string, password:string) {\r\n        let msg= { \r\n            login: { \"username\": username, \"password\": password } \r\n        };\r\n        return this.sendRequest(msg);\r\n    }\r\n\r\n    // ** send data to Signal K stream\r\n    send(data:any) {\r\n        if(this.ws) {\r\n            if(typeof data === 'object') { data= JSON.stringify(data) }\r\n            this.ws.send(data);\r\n        }\r\n    }\r\n\r\n    // ** send value(s) via delta stream update **\r\n    sendUpdate(context:string, path:Array<any>);\r\n    sendUpdate(context:string, path:string, value:any);\r\n    sendUpdate(context:string='self', path: string | Array<any>, value?:any) {\r\n        let val= Message.updates();\r\n        if(this._token) { val['token']= this._token }\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        let uValues= [];\r\n        if(typeof path === 'string') {\r\n            uValues.push({ path: path, value: value });\r\n        }\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n            uValues= path;\r\n        }\r\n        let u= { \r\n            timestamp: new Date().toISOString(), \r\n            values: uValues \r\n        }\r\n        if(this._source) { u['source']= this._source }\r\n        val.updates.push( u ); \r\n        this.send(val);\r\n    }\r\n\r\n    // ** Subscribe to Delta stream messages options: {..}**\r\n    subscribe(context:string, path:Array<any>);\r\n    subscribe(context:string, path:string, options?:any);\r\n    subscribe(context:string='*', path:string | Array<any>='*', options?:any) {\r\n        let val= Message.subscribe();\r\n        if(this._token) { val['token']= this._token }\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n           val.subscribe= path;\r\n        }\r\n        if(typeof path === 'string') {\r\n            let sValue= {};\r\n            sValue['path']= path;\r\n            if(options && typeof options === 'object') {\r\n                if(options['period']) { sValue['period']= options['period'] }\r\n                if(options['minPeriod']) { sValue['minPeriod']= options['period'] }\r\n                if(options['format'] && \r\n                    (options['format']=='delta' || options['format']=='full') ) { \r\n                        sValue['format']= options['format'];\r\n                }\r\n                if(options['policy'] && \r\n                    (options['policy']=='instant' || options['policy']=='ideal'\r\n                    || options['policy']=='fixed') ) { \r\n                        sValue['policy']= options['policy'];\r\n                }\r\n            }\r\n            val.subscribe.push(sValue);\r\n        }\r\n        this.send(val);        \r\n    }\r\n\r\n    // ** Unsubscribe from Delta stream messages **\r\n    unsubscribe(context:string='*', path:any='*') {\r\n        let val= Message.unsubscribe();\r\n        if(this._token) { val['token']= this._token }\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n           val.unsubscribe= path;\r\n        }\r\n        if(typeof path === 'string') { val.unsubscribe.push({path: path}) }\r\n        this.send(val); \r\n    }\r\n\r\n    // ** raise alarm for path\r\n    raiseAlarm(context:string, name:string, alarm:Alarm);\r\n    raiseAlarm(context:string, type:AlarmType, alarm:Alarm);\r\n    raiseAlarm(context:string='*', alarmId:any, alarm:Alarm) {\r\n        let n:string;\r\n        if(typeof alarmId === 'string') {\r\n            n=(alarmId.indexOf('notifications.')==-1) ? `notifications.${alarmId}` : alarmId;\r\n        }\r\n        else { n= alarmId }\r\n        this.sendUpdate(context, n, alarm.value );\r\n    }\r\n\r\n    // ** raise alarm for path\r\n    clearAlarm(context:string='*', name:string) {\r\n        let n=(name.indexOf('notifications.')==-1) ? `notifications.${name}` : name;\r\n        this.sendUpdate(context, n, null);\r\n    }    \r\n\r\n    // *************** MESSAGE PARSING ******************************\r\n    // ** returns true if message context is 'self'\r\n    isSelf(msg:any):boolean { return (msg.context== this.selfId) }\r\n    // ** returns true if message is a Delta message\r\n    isDelta(msg:any):boolean { return typeof msg.context!= 'undefined' }\r\n    // ** returns true if message is a Hello message\r\n    isHello(msg:any):boolean { \r\n        return (typeof msg.version!= 'undefined' && typeof msg.self!= 'undefined');\r\n    }     \r\n    // ** returns true if message is a request Response message\r\n    isResponse(msg:any):boolean { return typeof msg.requestId!= 'undefined' } \r\n}","/** Web Worker Service\r\n * ************************************/\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKStreamWorker  {\r\n\r\n\tprivate _error: Subject<any>;\r\n\tprivate _message: Subject<any>;\r\n    private worker: Worker;\r\n    \r\n   // **************** ATTRIBUTES ***************************\r\n\t\r\n    public onError: Observable<any>; \t\r\n    public onMessage: Observable<any>;\t\r\n\r\n   // *******************************************************    \r\n\r\n    constructor() {\r\n        this._error= new Subject<string>();\r\n        this.onError= this._error.asObservable();  \r\n        this._message= new Subject<string>();\r\n        this.onMessage= this._message.asObservable();   \r\n    } \r\n\r\n    ngOnDestroy() { this.worker.terminate(); this.worker = undefined; }\r\n\r\n    // ** Initialise worker\r\n    init(pathToFile:string) { \r\n        if(typeof(Worker)== \"undefined\") { return false }\r\n        if(this.worker) { this.worker.terminate() }   // ** terminate an open worker\r\n\r\n        this.worker= new Worker(pathToFile);\r\n        this.worker.onmessage= event=> { this._message.next(event) };\r\n        this.worker.onerror= event=> { this._error.next(event) };           \r\n        // ** worker ready for postMessage()\r\n    }    \r\n    \r\n    // ** Send message to worker\r\n    postMessage(msg:any) { if(this.worker) {this.worker.postMessage(msg) } }\r\n\r\n    // ** terminate worker\r\n    terminate() { if(this.worker) {this.worker.terminate()} }\r\n}","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { SignalKHttp } from './http-api';\nimport { SignalKStream } from './stream-api';\nimport { Path, Message } from './utils';\nimport { SignalKStreamWorker} from './stream-worker';\nimport { UUID } from './uuid';\n\n@Injectable({ providedIn: 'root' })\nexport class SignalKClient {\n    \n    private hostname: string;\n    private port: number;\n    private protocol: string;\n  \n    private _version: string= 'v1';      // ** default Signal K api version\n    private _token: string;             // token for when security is enabled on the server\n\n    private debug(val: any) { if(isDevMode()){ console.log(val) } }\n    \n    // **************** ATTRIBUTES ***************************\n\n    // ** server information block **\n    public server= {\n        endpoints: {},\n        info: {},\n        apiVersions: []\n    }    \n    // ** get / set Signal K preferred api version to use **\n    get version():number { return parseInt( this._version.slice(1) ) }\n    set version(val: number) {\n        let v:string= 'v'+ val;\n        if(this.server.apiVersions.length==0) { \n            this._version= v;\n            this.debug(`Signal K api version set to: ${v}`);\n        }\n        else {\n            this._version= (this.server.apiVersions.indexOf(v)!=-1) ? v : this._version;\n            this.debug(`Signal K api version set request: ${v}, result: ${this._version}`);\n        }\n    }\n    // ** set auth token value **\n    set authToken(val:string) { \n        this._token= val;\n        this.api.authToken= val;\n        this.stream.authToken= val;\n    }    \n    // ** Message Object\n    get message() { return Message }\n\n    // ** generate and return a UUID object\n    get uuid():UUID { return new UUID() }\n\n    // *******************************************************\n    constructor( private http: HttpClient, \n                public api: SignalKHttp, \n                public stream: SignalKStream,\n                public worker: SignalKStreamWorker ) { \n        this.init();                          \n    }\n\n    ngOnDestroy() { this.stream.close() }   \n    \n    // ** initialise protocol, hostname, port values\n    private init(hostname:string='localhost', port:number=null, useSSL:boolean=false) {\n        this.hostname = hostname;\n        if(useSSL) {\n            this.protocol = 'https';\n            this.port = port || 443;\n        } \n        else {\n            this.protocol = 'http';\n            this.port = port || 80;\n        }        \n    }    \n\n    // **************** CONNECTION AND DISCOVERY  ********************\n\n    // ** Signal K server endpoint discovery request (/signalk).  \n    hello(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        this.init(hostname, port, useSSL);\n        return this.get('/signalk');\n    }    \n    // ** connect to server (endpoint discovery) and DO NOT open Stream\n    connect(hostname:string=null, port:number=null, useSSL:boolean=false): Promise<any> {\n        return new Promise( (resolve, reject)=> {\n            this.debug('Contacting Signal K server.........');\n            this.hello(hostname, port, useSSL).subscribe(    // ** discover endpoints **\n                response=> { \n                    if(this.stream) { this.stream.close() }\n                    this.processHello(response);\n                    this.api.endpoint= this.resolveHttpEndpoint();\n                    this.stream.endpoint= this.resolveStreamEndpoint();\n                    resolve(true);\n                },\n                error=> { \n                    this.disconnectedFromServer();       \n                    reject(error);\n                }\n            );\n        });\n    }    \n\n    // ** disconnect from server\n    disconnect() { this.stream.close(); this.worker.terminate(); }\n    \n    // ** Connect + open Delta Stream (endpoint discovery)\n    connectStream(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        return new Promise( (resolve, reject)=> {\n            this.connect(hostname, port, useSSL)\n            .then( ()=> { \n                // ** connect to stream api at preferred version else fall back to default version\n                let url= this.resolveStreamEndpoint();\n                if(!url) { \n                    reject( new Error('Server has no advertised Stream endpoints!') );\n                    return;\n                }\n                this.stream.open(url, subscribe);\n                resolve( true );\n            })\n            .catch( e=> { reject( e ) });\n        });\n    } \n\n    // ** connect to playback stream (endpoint discovery)\n    connectPlayback(hostname:string=null, port:number=null, useSSL:boolean=false, options:any) {\n        return new Promise( (resolve, reject)=> {\n            this.connect(hostname, port, useSSL)\n            .then( ()=> { \n                // ** connect to playback api at preferred version else fall back to default version\n                this.openPlayback(null, options, this._token);\n                resolve( true );\n            })\n            .catch( e=> { reject( e ) });\n        })\n    }      \n\n    // ** connect to delta stream with (NO endpoint discovery)\n    openStream(url:string=null, subscribe?:string, token?:string) {\n        this.debug('openStream.........');  \n        if(!url) {     // connect to stream api at discovered endpoint\n            url= this.resolveStreamEndpoint();\n            if(!url) { \n                return( new Error('Server has no advertised Stream endpoints!') );\n            }\n        }\n        this.stream.open(url, subscribe, token);  \n        return true;      \n    }   \n\n    // ** connect to playback stream (NO endpoint discovery)\n    openPlayback(url:string=null, options?:any, token?:string) {\n        this.debug('openPlayback.........');\n        if(!url) {     // connect to stream api at discovered endpoint\n            url= this.resolveStreamEndpoint();\n            if(!url) { \n                return( new Error('Server has no advertised Stream endpoints!') );\n            }\n            url= url.replace('stream', 'playback');\n        }        \n        let pb= '';\n        let subscribe: string;\n        if(options && typeof options ==='object'){\n            pb+= (options.startTime) ? '?startTime=' + options.startTime.slice(0,options.startTime.indexOf('.')) + 'Z' : '';\n            pb+= (options.playbackRate) ? `&playbackRate=${options.playbackRate}` : '';\n            subscribe= (options.subscribe) ? options.subscribe : null;            \n        }\n        this.stream.open(url + pb, subscribe, token); \n        return true;\n    }      \n\n    // ** process Hello response \n    private processHello(response: any) {\n        this.server.endpoints= (response['endpoints']) ? response['endpoints'] : {};\n        this.server.info= (response['server']) ? response['server'] : {};\n        this.server.apiVersions= (this.server.endpoints) ? Object.keys(this.server.endpoints) : [];\n        this.debug(this.server.endpoints);\n        this.api.server= this.server.info;\n    }\n\n    // ** return preferred WS stream url\n    public resolveStreamEndpoint():string {\n        if(this.server.endpoints[this._version] && this.server.endpoints[this._version]['signalk-ws']) {\n            this.debug(`Connecting endpoint version: ${this._version}`);\n            return `${this.server.endpoints[this._version]['signalk-ws']}`;\n        }\n        else if(this.server.endpoints['v1'] && this.server.endpoints['v1']['signalk-ws']) { \n            this.debug(`Connection falling back to: v1`);\n            return `${this.server.endpoints['v1']['signalk-ws']}` \n        }\n        else { return null }\n    }  \n\n    // ** return signalk-http endpoint url\n    private resolveHttpEndpoint():string {\n        let url: string;\n        if(this.server.endpoints[this._version]) { // ** connection made\n            // ** connect to http endpoint at prescribed version else fall back to default version\n            if(this.server.endpoints[this._version]['signalk-http']) {\n                url= `${this.server.endpoints[this._version]['signalk-http']}`;\n            }\n            else { url= `${this.server.endpoints['v1']['signalk-http']}` }   \n        } \n        else {\n            let msg= 'No current connection http endpoint service! Use connect() to establish a connection.'\n            this.debug(msg);\n        } \n        return url;   \n    }    \n    \n    // ** cleanup on server disconnection\n    private disconnectedFromServer() {\n        this.server.endpoints= {};\n        this.server.info= {};\n        this.server.apiVersions= [];  \n    }\n\n    //** return observable response from http path\n    get(path:string) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`get ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }        \n    };  \n\n    //** return observable response for put to http path\n    put(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`put ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, { headers: headers } );\n        }\n        else { return this.http.put(url, value) }        \n    };\n\n    //** return observable response for post to http path\n    post(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`post ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.post( url, { headers: headers } );\n        }\n        else { return this.http.post(url, value) }        \n    };   \n\n    // ** get auth token for supplied user details **\n    login(username:string, password:string) {\n        let headers= new HttpHeaders().set('Content-Type', `application/json`);\n        return this.http.post(\n            `${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/login`,\n            { \"username\": username, \"password\": password },\n            { headers }\n        );\n    }\n\t\n    // ** logout from server **\n    logout() {\n\t\tlet url=`${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/logout`;\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, null, { headers } );\n        }        \n        else { return this.http.put( url, null ) }\n    }\t   \n    \n    //** get data via the snapshot http api path for supplied time\n    snapshot(context:string, time:string) { \n        if(!time) { return }\n        time= time.slice(0,time.indexOf('.')) + 'Z';\n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        url= `${url.replace('api','snapshot')}${Path.contextToPath(context)}?time=${time}`;\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }\n    }\n\n}\n","/*****************************\r\n * SignalKClient Module:\r\n *****************************/\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule} from '@angular/common/http';\r\n\r\n@NgModule({\r\n    imports: [ HttpClientModule ],    \r\n    declarations: [],\r\n    exports: [],\r\n    entryComponents: [], \r\n    providers: []  \r\n})\r\nexport class SignalKClientModule {}\r\n\r\nexport * from './signalk-client';\r\nexport * from './utils';"]}