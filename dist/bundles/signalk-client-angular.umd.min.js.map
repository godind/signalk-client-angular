{"version":3,"sources":["ng://signalk-client-angular/lib/utils.ts","ng://signalk-client-angular/lib/http-api.ts","ng://signalk-client-angular/lib/stream-api.ts","ng://signalk-client-angular/lib/stream-worker.ts","ng://signalk-client-angular/lib/uuid.ts","ng://signalk-client-angular/lib/signalk-client.ts","ng://signalk-client-angular/lib/signalk-client.module.ts"],"names":["Path","dotToSlash","path","indexOf","split","join","contextToPath","context","Message","updates","subscribe","unsubscribe","request","requestId","SignalKHttp","http","this","Object","defineProperty","prototype","val","_token","getSelf","get","getSelfId","getMeta","endpoint","slice","url","headers","HttpHeaders","Authorization","put","key","value","msg","Injectable","args","providedIn","HttpClient","SignalKStream","_filter","_wsTimeout","_playbackMode","_connect","Subject","onConnect","asObservable","_close","onClose","_error","onError","_message","onMessage","ws","readyState","id","selfId","close","open","token","_this","q","WebSocket","setTimeout","console","warn","onopen","e","next","onclose","onerror","onmessage","data","JSON","parse","isHello","self","startTime","isDelta","send","stringify","sendUpdate","uValues","push","Array","isArray","values","options","sValue","isSelf","version","isResponse","SignalKStreamWorker","ngOnDestroy","worker","terminate","undefined","init","pathToFile","Worker","event","postMessage","UUID","limitUI04","maxFromBits","limitUI06","limitUI08","limitUI12","limitUI14","limitUI16","limitUI32","limitUI40","limitUI48","create","toString","hex","toURN","toSignalK","toBytes","parts","ints","intPos","i","length","j","parseInt","substr","bits","Math","pow","getRandomInt","min","max","floor","random","randomUI04","randomUI06","randomUI08","randomUI12","randomUI14","randomUI16","randomUI32","randomUI40","randomUI48","fromParts","paddedString","string","z","String","timeLow","timeMid","timeHiAndVersion","clockSeqHiAndReserved","clockSeqLow","node","SignalKClient","api","stream","_version","server","endpoints","info","apiVersions","debug","isDevMode","log","v","hostname","port","useSSL","protocol","hello","connect","Promise","resolve","reject","response","processHello","resolveHttpEndpoint","resolveStreamEndpoint","error","disconnectedFromServer","disconnect","connectStream","then","Error","catch","connectPlayback","openPlayback","openStream","replace","pb","playbackRate","keys","post","login","username","password","set","logout","snapshot","time","SignalKClientModule","NgModule","imports","HttpClientModule","declarations","exports","entryComponents","providers"],"mappings":"oYACA,iBAAA,SAAAA,KAcA,OAXWA,EAAAC,WAAP,SAAkBC,GACd,OAAuB,GAApBA,EAAKC,QAAQ,KAAmBD,EAAKE,MAAM,KAAKC,KAAK,KAC1CH,GAIXF,EAAAM,cAAP,SAAqBC,GAEjB,OADmB,QAATA,EAAoB,eAAgBA,GACnCH,MAAM,KAAKC,KAAK,MAGnCL,kBAGA,SAAAQ,KAuCA,OApCWA,EAAAC,QAAP,WAEI,MAAO,CACHF,QAAS,KACTE,QAAS,KAIVD,EAAAE,UAAP,WAQI,MAAO,CACHH,QAAS,KACTG,UAAW,KAIZF,EAAAG,YAAP,WAEI,MAAO,CACHJ,QAAS,KACTI,YAAa,KAIdH,EAAAI,QAAP,WACI,MAAO,CACHC,UAAW,OAIvBL,KCzDAM,EAAA,WAiBI,SAAAA,EAAqBC,GAAAC,KAAAD,KAAAA,SAJrBE,OAAAC,eAAIJ,EAAAK,UAAA,QAAK,KAAT,SAAUC,GAAcJ,KAAKK,OAAQD,mCAOrCN,EAAAK,UAAAG,QAAA,WAAY,OAAON,KAAKO,IAAI,iBAG5BT,EAAAK,UAAAK,UAAA,WAAc,OAAOR,KAAKO,IAAI,SAG9BT,EAAAK,UAAAM,QAAA,SAAQlB,EAAgBL,GACpB,OAAOc,KAAKO,IAAOvB,EAAKM,cAAcC,GAAQ,IAAIP,EAAKC,WAAWC,GAAK,UAI3EY,EAAAK,UAAAI,IAAA,SAAIrB,GACA,GAAIc,KAAKU,SAAT,CACY,KAATxB,EAAK,KAAWA,EAAMA,EAAKyB,MAAM,QAChCC,EAAKZ,KAAKU,SAAW1B,EAAKC,WAAWC,GACzC,GAAGc,KAAKK,OAAQ,KACRQ,EAAS,IAAIC,EAAAA,YAAa,CAAEC,cAAiB,OAAOf,KAAKK,SAC7D,OAAOL,KAAKD,KAAKQ,IAAKK,EAAK,CAAEC,QAASA,IAEnC,OAAOb,KAAKD,KAAKQ,IAAIK,KAMhCd,EAAAK,UAAAa,IAAA,SAAIzB,EAAgBL,EAAa+B,EAAUC,GACvC,GAAIlB,KAAKU,SAAT,CACY,KAATxB,EAAK,KAAWA,EAAMA,EAAKyB,MAAM,QAChCC,EAAKZ,KAAKU,SAAW1B,EAAKM,cAAcC,GAAW,IAAMP,EAAKC,WAAWC,GACzEiC,EAAM,CAAED,MAAO,IAInB,QAHiB,IAAPA,EAAsBC,EAAID,MAAOD,EAC1CE,EAAID,MAAMD,GAAMC,EAEdlB,KAAKK,OAAQ,KACRQ,EAAS,IAAIC,EAAAA,YAAa,CAAEC,cAAiB,OAAOf,KAAKK,SAC7D,OAAOL,KAAKD,KAAKiB,IAAIJ,EAAKO,EAAK,CAAEN,QAASA,IAEvC,OAAOb,KAAKD,KAAKiB,IAAIJ,EAAKO,yBArDxCC,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAHjBC,EAAAA,2IADT,GCAAC,EAAA,WAqDI,SAAAA,IAxCQxB,KAAAyB,QAAS,KACTzB,KAAA0B,WAAY,IAEZ1B,KAAA2B,eAAwB,EAsC5B3B,KAAK4B,SAAU,IAAIC,EAAAA,QACnB7B,KAAK8B,UAAW9B,KAAK4B,SAASG,eAC9B/B,KAAKgC,OAAQ,IAAIH,EAAAA,QACjB7B,KAAKiC,QAASjC,KAAKgC,OAAOD,eAC1B/B,KAAKkC,OAAQ,IAAIL,EAAAA,QACjB7B,KAAKmC,QAASnC,KAAKkC,OAAOH,eAC1B/B,KAAKoC,SAAU,IAAIP,EAAAA,QACnB7B,KAAKqC,UAAWrC,KAAKoC,SAASL,sBAhClC9B,OAAAC,eAAIsB,EAAArB,UAAA,QAAK,KAAT,SAAUC,GAAcJ,KAAKK,OAAQD,mCAErCH,OAAAC,eAAIsB,EAAArB,UAAA,oBAAiB,KAArB,WAAiC,OAAOH,KAAK0B,gBAC7C,SAAsBtB,GAClBJ,KAAK0B,WAAatB,EAAI,IAAQ,IAAY,IAAJA,EAAa,IAAQA,mCAG/DH,OAAAC,eAAIsB,EAAArB,UAAA,SAAM,KAAV,WACI,SAAQH,KAAKsC,IAA2B,GAApBtC,KAAKsC,GAAGC,YAAqC,GAApBvC,KAAKsC,GAAGC,6CAGzDtC,OAAAC,eAAIsB,EAAArB,UAAA,SAAM,KAAV,WAAsB,OAAOH,KAAKyB,aAElC,SAAWe,GACHA,IAA2B,GAArBA,EAAGrD,QAAQ,QACjBa,KAAKyB,QAAUzB,KAAW,OAAIA,KAAKyC,OAAS,KAEzCzC,KAAKyB,QAASe,mCAGzBvC,OAAAC,eAAIsB,EAAArB,UAAA,eAAY,KAAhB,WAA6B,OAAOH,KAAK2B,+CAgBzCH,EAAArB,UAAAuC,MAAA,WAAa1C,KAAKsC,KAAMtC,KAAKsC,GAAGI,QAAS1C,KAAKsC,GAAI,OAGrDd,EAAArB,UAAAwC,KAAA,SAAK/B,EAAYlB,EAAmBkD,GAApC,IAAAC,EAAA7C,KAEO,GADAY,EAAK,GAAcZ,KAAKU,SACxB,KACIoC,GAAuB,GAAnBlC,EAAIzB,QAAQ,KAAY,IAAM,IACnCO,IAAakB,GAAQkC,EAAC,aAAapD,IACnCM,KAAKK,QAAUuC,KAAShC,IAAS,EAAc,IAAM,KAAG,UAASZ,KAAKK,QAAUuC,IAEnF5C,KAAK0C,QACL1C,KAAKsC,GAAK,IAAIS,UAAUnC,GAExBoC,WACI,WACOH,EAAKP,IAA2B,GAApBO,EAAKP,GAAGC,YAAqC,GAApBM,EAAKP,GAAGC,aAC5CU,QAAQC,KAAK,gCAAgCL,EAAKnB,WAAW,IAAI,UAAUmB,EAAKP,GAAGC,WAAU,8BAC7FM,EAAKH,UAEV1C,KAAK0B,YAGlB1B,KAAKsC,GAAGa,OAAQ,SAAAC,GAAMP,EAAKjB,SAASyB,KAAKD,IACzCpD,KAAKsC,GAAGgB,QAAS,SAAAF,GAAMP,EAAKb,OAAOqB,KAAKD,IACxCpD,KAAKsC,GAAGiB,QAAS,SAAAH,GAAMP,EAAKX,OAAOmB,KAAKD,IACxCpD,KAAKsC,GAAGkB,UAAW,SAAAJ,OACLK,EACJ,GAAqB,iBAAXL,EAAEK,KACR,IAAMA,EAAMC,KAAKC,MAAMP,EAAEK,MACzB,MAAML,GAAK,OAEZP,EAAKe,QAAQH,IACZZ,EAAKJ,OAAQgB,EAAKI,KAClBhB,EAAKlB,cAAwC,oBAAjB8B,EAAKK,UACjCjB,EAAKT,SAASiB,KAAKI,IAEfZ,EAAKpB,SAAWoB,EAAKkB,QAAQN,GAC9BA,EAAKlE,SAAUsD,EAAKpB,SAAWoB,EAAKT,SAASiB,KAAKI,GAElDZ,EAAKT,SAASiB,KAAKI,MAKlCjC,EAAArB,UAAA6D,KAAA,SAAKP,GACEzD,KAAKsC,KACe,iBAATmB,IAAqBA,EAAMC,KAAKO,UAAUR,IACpDzD,KAAKsC,GAAG0B,KAAKP,KAOrBjC,EAAArB,UAAA+D,WAAA,SAAW3E,EAAuBL,EAA2BgC,QAAlD,IAAA3B,IAAAA,EAAA,YACHa,EAAKZ,EAAQC,UACjBW,EAAIb,QAAmB,QAATA,EAAmB,eAAiBA,EAC/CS,KAAKK,SAAUD,EAAW,MAAGJ,KAAKK,YAEjC8D,EAAS,GACM,iBAATjF,GACNiF,EAAQC,KAAK,CAAElF,KAAMA,EAAMgC,MAAOA,IAEnB,iBAAThC,GAAqBmF,MAAMC,QAAQpF,KACzCiF,EAASjF,GAEbkB,EAAIX,QAAQ2E,KAAK,CAAEG,OAAQJ,IAC3BnE,KAAKgE,KAAK5D,IAMdoB,EAAArB,UAAAT,UAAA,SAAUH,EAAoBL,EAA8BsF,QAAlD,IAAAjF,IAAAA,EAAA,UAAoB,IAAAL,IAAAA,EAAA,SACtBkB,EAAKZ,EAAQE,YAOjB,GANAU,EAAIb,QAAmB,QAATA,EAAmB,eAAiBA,EAC/CS,KAAKK,SAAUD,EAAW,MAAGJ,KAAKK,QAElB,iBAATnB,GAAqBmF,MAAMC,QAAQpF,KAC1CkB,EAAIV,UAAWR,GAEC,iBAATA,EAAmB,KACrBuF,EAAQ,GACZA,EAAa,KAAGvF,EACbsF,GAA8B,iBAAZA,IACdA,EAAgB,SAAKC,EAAe,OAAGD,EAAgB,QACvDA,EAAmB,YAAKC,EAAkB,UAAGD,EAAgB,SAC7DA,EAAgB,QACK,SAAnBA,EAAgB,QAAiC,QAAnBA,EAAgB,SAC3CC,EAAe,OAAGD,EAAgB,SAEvCA,EAAgB,QACK,WAAnBA,EAAgB,QAAmC,SAAnBA,EAAgB,QAC3B,SAAnBA,EAAgB,SACfC,EAAe,OAAGD,EAAgB,SAG9CpE,EAAIV,UAAU0E,KAAKK,GAEvBzE,KAAKgE,KAAK5D,IAIdoB,EAAArB,UAAAR,YAAA,SAAYJ,EAAoBL,QAApB,IAAAK,IAAAA,EAAA,UAAoB,IAAAL,IAAAA,EAAA,SACxBkB,EAAKZ,EAAQG,cACjBS,EAAIb,QAAmB,QAATA,EAAmB,eAAiBA,EAC/CS,KAAKK,SAAUD,EAAW,MAAGJ,KAAKK,QAElB,iBAATnB,GAAqBmF,MAAMC,QAAQpF,KAC1CkB,EAAIT,YAAaT,GAED,iBAATA,GAAqBkB,EAAIT,YAAYyE,KAAK,CAAClF,KAAMA,IAC3Dc,KAAKgE,KAAK5D,IAKdoB,EAAArB,UAAAuE,OAAA,SAAOvD,GAAmB,OAAQA,EAAI5B,SAAUS,KAAKyC,QAErDjB,EAAArB,UAAA4D,QAAA,SAAQ5C,GAAmB,MAA4B,oBAAdA,EAAI5B,SAE7CiC,EAAArB,UAAAyD,QAAA,SAAQzC,GACJ,MAA6B,oBAAdA,EAAIwD,SAA2C,oBAAXxD,EAAI0C,MAG3DrC,EAAArB,UAAAyE,WAAA,SAAWzD,GAAmB,MAA8B,oBAAhBA,EAAItB,+BA1LnDuB,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,sJAJ1B,gBCmBI,SAAAuD,IACI7E,KAAKkC,OAAQ,IAAIL,EAAAA,QACjB7B,KAAKmC,QAASnC,KAAKkC,OAAOH,eAC1B/B,KAAKoC,SAAU,IAAIP,EAAAA,QACnB7B,KAAKqC,UAAWrC,KAAKoC,SAASL,sBAGlC8C,EAAA1E,UAAA2E,YAAA,WAAgB9E,KAAK+E,OAAOC,YAAahF,KAAK+E,OAASE,WAGvDJ,EAAA1E,UAAA+E,KAAA,SAAKC,GAAL,IAAAtC,EAAA7C,KACI,GAAoB,oBAAjB,OAAgC,OAAO,EACvCA,KAAK+E,QAAU/E,KAAK+E,OAAOC,YAE9BhF,KAAK+E,OAAQ,IAAIK,OAAOD,GACxBnF,KAAK+E,OAAOvB,UAAW,SAAA6B,GAAUxC,EAAKT,SAASiB,KAAKgC,IACpDrF,KAAK+E,OAAOxB,QAAS,SAAA8B,GAAUxC,EAAKX,OAAOmB,KAAKgC,KAKpDR,EAAA1E,UAAAmF,YAAA,SAAYnE,GAAcnB,KAAK+E,QAAS/E,KAAK+E,OAAOO,YAAYnE,IAGhE0D,EAAA1E,UAAA6E,UAAA,WAAiBhF,KAAK+E,QAAS/E,KAAK+E,OAAOC,iCAtC9C5D,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,sKCetB,SAAAiE,IACIvF,KAAKwF,UAAYxF,KAAKyF,YAAY,GAClCzF,KAAK0F,UAAY1F,KAAKyF,YAAY,GAClCzF,KAAK2F,UAAY3F,KAAKyF,YAAY,GAClCzF,KAAK4F,UAAY5F,KAAKyF,YAAY,IAClCzF,KAAK6F,UAAY7F,KAAKyF,YAAY,IAClCzF,KAAK8F,UAAY9F,KAAKyF,YAAY,IAClCzF,KAAK+F,UAAY/F,KAAKyF,YAAY,IAClCzF,KAAKgG,UAAYhG,KAAKyF,YAAY,IAClCzF,KAAKiG,UAAYjG,KAAKyF,YAAY,IAElCzF,KAAKkG,SAiJb,OA9IIX,EAAApF,UAAAgG,SAAA,WAAa,OAAOnG,KAAKoG,KACzBb,EAAApF,UAAAkG,MAAA,WAAU,MAAO,YAAcrG,KAAKoG,KACpCb,EAAApF,UAAAmG,UAAA,WAAsB,MAAO,wBAAwBtG,KAAKoG,KAC1Db,EAAApF,UAAAoG,QAAA,WAII,QAHIC,EAAQxG,KAAKoG,IAAIhH,MAAM,KACvBqH,EAAO,GACPC,EAAS,EACJC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAMG,GAAGC,OAAQC,GAAG,EACxCJ,EAAKC,KAAYI,SAASN,EAAMG,GAAGI,OAAOF,EAAG,GAAI,IAGrD,OAAOJ,GAGHlB,EAAApF,UAAAsF,YAAR,SAAoBuB,GAAQ,OAAOC,KAAKC,IAAI,EAAGF,IAEvCzB,EAAApF,UAAAgH,aAAR,SAAqBC,EAAKC,GAAO,OAAOJ,KAAKK,MAAML,KAAKM,UAAYF,EAAMD,EAAM,IAAMA,GAE9E7B,EAAApF,UAAAqH,WAAR,WAAuB,OAAOxH,KAAKmH,aAAa,EAAGnH,KAAKwF,UAAU,IAC1DD,EAAApF,UAAAsH,WAAR,WAAuB,OAAOzH,KAAKmH,aAAa,EAAGnH,KAAK0F,UAAU,IAC1DH,EAAApF,UAAAuH,WAAR,WAAuB,OAAO1H,KAAKmH,aAAa,EAAGnH,KAAK2F,UAAU,IAC1DJ,EAAApF,UAAAwH,WAAR,WAAuB,OAAO3H,KAAKmH,aAAa,EAAGnH,KAAK4F,UAAU,IAC1DL,EAAApF,UAAAyH,WAAR,WAAuB,OAAO5H,KAAKmH,aAAa,EAAGnH,KAAK6F,UAAU,IAC1DN,EAAApF,UAAA0H,WAAR,WAAuB,OAAO7H,KAAKmH,aAAa,EAAGnH,KAAK8F,UAAU,IAC1DP,EAAApF,UAAA2H,WAAR,WAAuB,OAAO9H,KAAKmH,aAAa,EAAGnH,KAAK+F,UAAU,IAC1DR,EAAApF,UAAA4H,WAAR,WAAuB,OAAQ,EAAId,KAAKM,UAAY,GAAK,MAAQ,EAAiB,KAAbN,KAAKM,WAA8B,GAAK,KACrGhC,EAAApF,UAAA6H,WAAR,WAAuB,OAAQ,EAAIf,KAAKM,UAAY,GAAK,MAAQ,EAAIN,KAAKM,UAAY,GAAK,MAAa,GAAK,KAErGhC,EAAApF,UAAA+F,OAAR,WACIlG,KAAKiI,UACDjI,KAAK8H,aACL9H,KAAK6H,aACL,MAAS7H,KAAK2H,aACd,IAAS3H,KAAKyH,aACdzH,KAAK0H,aACL1H,KAAKgI,eAILzC,EAAApF,UAAA+H,aAAR,SAAqBC,EAAQvB,EAAQwB,QAAA,IAAAA,IAAAA,EAAA,MAEjCA,EAAMA,GAAK,IAEX,QADIzB,EAAIC,GAFRuB,EAASE,OAAOF,IAEQvB,OACb,EAAJD,EAAOA,KAAO,EAAGyB,GAAKA,EACjB,EAAJzB,IACJwB,EAASC,EAAID,GAGjB,OAAOA,GAGH5C,EAAApF,UAAA8H,UAAR,SAAkBK,EAASC,EAASC,EAAkBC,EAAuBC,EAAaC,GAYtF,OAXA,KAAKhE,QAAW6D,GAAoB,GAAM,GAC1C,KAAKpC,IAAM,KAAK8B,aAAaI,EAAQnC,SAAS,IAAK,GAC7C,IACA,KAAK+B,aAAaK,EAAQpC,SAAS,IAAK,GACxC,IACA,KAAK+B,aAAaM,EAAiBrC,SAAS,IAAK,GACjD,IACA,KAAK+B,aAAaO,EAAsBtC,SAAS,IAAK,GACtD,KAAK+B,aAAaQ,EAAYvC,SAAS,IAAK,GAC5C,IACA,KAAK+B,aAAaS,EAAKxC,SAAS,IAAK,IAC3C,MA8ERZ,KChLAqD,EAAA,WAuDI,SAAAA,EAAqB7I,EACF8I,EACAC,EACA/D,GAHE/E,KAAAD,KAAAA,EACFC,KAAA6I,IAAAA,EACA7I,KAAA8I,OAAAA,EACA9I,KAAA+E,OAAAA,EA1CX/E,KAAA+I,SAAkB,KAQnB/I,KAAAgJ,OAAQ,CACXC,UAAW,GACXC,KAAM,GACNC,YAAa,IAgCbnJ,KAAKkF,cAxCD0D,EAAAzI,UAAAiJ,MAAR,SAAchJ,GAAeiJ,EAAAA,aAAcpG,QAAQqG,IAAIlJ,IAWvDH,OAAAC,eAAI0I,EAAAzI,UAAA,UAAO,KAAX,WAAuB,OAAO2G,SAAU9G,KAAK+I,SAASpI,MAAM,SAC5D,SAAYP,OACJmJ,EAAU,IAAKnJ,EACgB,GAAhCJ,KAAKgJ,OAAOG,YAAYvC,QACvB5G,KAAK+I,SAAUQ,EACfvJ,KAAKoJ,MAAM,gCAAgCG,KAG3CvJ,KAAK+I,UAAgD,GAArC/I,KAAKgJ,OAAOG,YAAYhK,QAAQoK,GAAUA,EAAIvJ,KAAK+I,SACnE/I,KAAKoJ,MAAM,qCAAqCG,EAAC,aAAavJ,KAAK+I,4CAI3E9I,OAAAC,eAAI0I,EAAAzI,UAAA,YAAS,KAAb,SAAcC,GACVJ,KAAKK,OAAQD,EACbJ,KAAK6I,IAAIjG,MAAOxC,EAChBJ,KAAK8I,OAAOlG,MAAOxC,mCAGvBH,OAAAC,eAAI0I,EAAAzI,UAAA,UAAO,KAAX,WAAgB,OAAOX,mCAGvBS,OAAAC,eAAI0I,EAAAzI,UAAA,OAAI,KAAR,WAAkB,OAAO,IAAIoF,mCAU7BqD,EAAAzI,UAAA2E,YAAA,WAAgB9E,KAAK8I,OAAOpG,SAGpBkG,EAAAzI,UAAA+E,KAAR,SAAasE,EAA6BC,EAAkBC,QAA/C,IAAAF,IAAAA,EAAA,kBAA6B,IAAAC,IAAAA,EAAA,WAAkB,IAAAC,IAAAA,GAAA,GACxD1J,KAAKwJ,SAAWA,EAGZxJ,KAAKyJ,KAFNC,GACC1J,KAAK2J,SAAW,QACJF,GAAQ,MAGpBzJ,KAAK2J,SAAW,OACJF,GAAQ,KAO5Bb,EAAAzI,UAAAyJ,MAAA,SAAMJ,EAAsBC,EAAkBC,GAE1C,YAFE,IAAAF,IAAAA,EAAA,WAAsB,IAAAC,IAAAA,EAAA,WAAkB,IAAAC,IAAAA,GAAA,GAC1C1J,KAAKkF,KAAKsE,EAAUC,EAAMC,GACnB1J,KAAKO,IAAI,aAGpBqI,EAAAzI,UAAA0J,QAAA,SAAQL,EAAsBC,EAAkBC,GAAhD,IAAA7G,EAAA7C,KACI,YADI,IAAAwJ,IAAAA,EAAA,WAAsB,IAAAC,IAAAA,EAAA,WAAkB,IAAAC,IAAAA,GAAA,GACrC,IAAII,QAAS,SAACC,EAASC,GAC1BnH,EAAKuG,MAAM,uCACXvG,EAAK+G,MAAMJ,EAAUC,EAAMC,GAAQhK,UAC/B,SAAAuK,GACOpH,EAAKiG,QAAUjG,EAAKiG,OAAOpG,QAC9BG,EAAKqH,aAAaD,GAClBpH,EAAKgG,IAAInI,SAAUmC,EAAKsH,sBACxBtH,EAAKiG,OAAOpI,SAAUmC,EAAKuH,wBAC3BL,GAAQ,IAEZ,SAAAM,GACIxH,EAAKyH,yBACLN,EAAOK,QAOvBzB,EAAAzI,UAAAoK,WAAA,WAAevK,KAAK8I,OAAOpG,QAAS1C,KAAK+E,OAAOC,aAGhD4D,EAAAzI,UAAAqK,cAAA,SAAchB,EAAsBC,EAAkBC,EAAsBhK,GAA5E,IAAAmD,EAAA7C,KACI,YADU,IAAAwJ,IAAAA,EAAA,WAAsB,IAAAC,IAAAA,EAAA,WAAkB,IAAAC,IAAAA,GAAA,QAAsB,IAAAhK,IAAAA,EAAA,MACjE,IAAIoK,QAAS,SAACC,EAASC,GAC1BnH,EAAKgH,QAAQL,EAAUC,EAAMC,GAC5Be,KAAM,eAEC7J,EAAKiC,EAAKuH,wBACVxJ,GAIJiC,EAAKiG,OAAOnG,KAAK/B,EAAKlB,GACtBqK,GAAS,IAJLC,EAAQ,IAAIU,MAAM,iDAMzBC,SAAO,SAAAvH,GAAM4G,EAAQ5G,QAK9BwF,EAAAzI,UAAAyK,gBAAA,SAAgBpB,EAAsBC,EAAkBC,EAAsBlF,GAA9E,IAAA3B,EAAA7C,KACI,YADY,IAAAwJ,IAAAA,EAAA,WAAsB,IAAAC,IAAAA,EAAA,WAAkB,IAAAC,IAAAA,GAAA,GAC7C,IAAII,QAAS,SAACC,EAASC,GAC1BnH,EAAKgH,QAAQL,EAAUC,EAAMC,GAC5Be,KAAM,WAEH5H,EAAKgI,aAAa,KAAMrG,EAAS3B,EAAKxC,QACtC0J,GAAS,KAEZY,SAAO,SAAAvH,GAAM4G,EAAQ5G,QAK9BwF,EAAAzI,UAAA2K,WAAA,SAAWlK,EAAiBlB,EAAmBkD,GAE3C,YAFO,IAAAhC,IAAAA,EAAA,MACPZ,KAAKoJ,MAAM,uBACPxI,IACAA,EAAKZ,KAAKoK,0BAKdpK,KAAK8I,OAAOnG,KAAK/B,EAAKlB,EAAWkD,IAC1B,GAJC,IAAY8H,MAAM,+CAQ9B9B,EAAAzI,UAAA0K,aAAA,SAAajK,EAAiB4D,EAAc5B,GAExC,QAFS,IAAAhC,IAAAA,EAAA,MACTZ,KAAKoJ,MAAM,0BACPxI,EAAK,CAEL,KADAA,EAAKZ,KAAKoK,yBAEN,OAAA,IAAYM,MAAM,8CAEtB9J,EAAKA,EAAImK,QAAQ,SAAU,gBAG3BrL,EADAsL,EAAI,GAQR,OANGxG,GAA6B,iBAAXA,IACjBwG,GAAMxG,EAAiB,UAAI,cAAgBA,EAAQV,UAAUnD,MAAM,EAAE6D,EAAQV,UAAU3E,QAAQ,MAAQ,IAAM,GAC7G6L,GAAMxG,EAAoB,aAAI,iBAAiBA,EAAQyG,aAAiB,GACxEvL,EAAY8E,EAAiB,UAAIA,EAAQ9E,UAAY,MAEzDM,KAAK8I,OAAOnG,KAAK/B,EAAMoK,EAAItL,EAAWkD,IAC/B,GAIHgG,EAAAzI,UAAA+J,aAAR,SAAqBD,GACjBjK,KAAKgJ,OAAOC,UAAYgB,EAAqB,UAAIA,EAAoB,UAAI,GACzEjK,KAAKgJ,OAAOE,KAAOe,EAAkB,OAAIA,EAAiB,OAAI,GAC9DjK,KAAKgJ,OAAOG,YAAcnJ,KAAKgJ,OAAgB,UAAI/I,OAAOiL,KAAKlL,KAAKgJ,OAAOC,WAAa,GACxFjJ,KAAKoJ,MAAMpJ,KAAKgJ,OAAOC,YAIpBL,EAAAzI,UAAAiK,sBAAP,WACI,OAAGpK,KAAKgJ,OAAOC,UAAUjJ,KAAK+I,WAAa/I,KAAKgJ,OAAOC,UAAUjJ,KAAK+I,UAAU,eAC5E/I,KAAKoJ,MAAM,gCAAgCpJ,KAAK+I,UACzC,GAAG/I,KAAKgJ,OAAOC,UAAUjJ,KAAK+I,UAAU,eAE3C/I,KAAKgJ,OAAOC,UAAc,IAAKjJ,KAAKgJ,OAAOC,UAAc,GAAE,eAC/DjJ,KAAKoJ,MAAM,kCACJ,GAAGpJ,KAAKgJ,OAAOC,UAAc,GAAE,eAE5B,MAIVL,EAAAzI,UAAAgK,oBAAR,eACQvJ,EACJ,GAAGZ,KAAKgJ,OAAOC,UAAUjJ,KAAK+I,UAGtBnI,EADDZ,KAAKgJ,OAAOC,UAAUjJ,KAAK+I,UAAU,gBAC/B,GAAG/I,KAAKgJ,OAAOC,UAAUjJ,KAAK+I,UAAU,gBAErC,GAAG/I,KAAKgJ,OAAOC,UAAc,GAAE,oBAE1C,CAEDjJ,KAAKoJ,MADI,yFAGb,OAAOxI,GAIHgI,EAAAzI,UAAAmK,uBAAR,WACItK,KAAKgJ,OAAOC,UAAW,GACvBjJ,KAAKgJ,OAAOE,KAAM,GAClBlJ,KAAKgJ,OAAOG,YAAa,IAI7BP,EAAAzI,UAAAI,IAAA,SAAIrB,OACI0B,EAAQZ,KAAK2J,SAAQ,MAAM3J,KAAKwJ,SAAQ,IAAIxJ,KAAKyJ,KAAOzK,EAAKC,WAAWC,GAE5E,GADAc,KAAKoJ,MAAM,OAAOxI,GACfZ,KAAKK,OAAQ,KACRQ,EAAS,IAAIC,EAAAA,YAAa,CAAEC,cAAiB,OAAOf,KAAKK,SAC7D,OAAOL,KAAKD,KAAKQ,IAAKK,EAAK,CAAEC,QAASA,IAEnC,OAAOb,KAAKD,KAAKQ,IAAIK,IAIhCgI,EAAAzI,UAAAa,IAAA,SAAI9B,EAAagC,OACTN,EAAQZ,KAAK2J,SAAQ,MAAM3J,KAAKwJ,SAAQ,IAAIxJ,KAAKyJ,KAAOzK,EAAKC,WAAWC,GAE5E,GADAc,KAAKoJ,MAAM,OAAOxI,GACfZ,KAAKK,OAAQ,KACRQ,EAAS,IAAIC,EAAAA,YAAa,CAAEC,cAAiB,OAAOf,KAAKK,SAC7D,OAAOL,KAAKD,KAAKiB,IAAKJ,EAAK,CAAEC,QAASA,IAEnC,OAAOb,KAAKD,KAAKiB,IAAIJ,EAAKM,IAIrC0H,EAAAzI,UAAAgL,KAAA,SAAKjM,EAAagC,OACVN,EAAQZ,KAAK2J,SAAQ,MAAM3J,KAAKwJ,SAAQ,IAAIxJ,KAAKyJ,KAAOzK,EAAKC,WAAWC,GAE5E,GADAc,KAAKoJ,MAAM,QAAQxI,GAChBZ,KAAKK,OAAQ,KACRQ,EAAS,IAAIC,EAAAA,YAAa,CAAEC,cAAiB,OAAOf,KAAKK,SAC7D,OAAOL,KAAKD,KAAKoL,KAAMvK,EAAK,CAAEC,QAASA,IAEpC,OAAOb,KAAKD,KAAKoL,KAAKvK,EAAKM,IAItC0H,EAAAzI,UAAAiL,MAAA,SAAMC,EAAiBC,OACfzK,GAAS,IAAIC,EAAAA,aAAcyK,IAAI,eAAgB,oBACnD,OAAOvL,KAAKD,KAAKoL,KACVnL,KAAK2J,SAAQ,MAAM3J,KAAKwJ,SAAQ,IAAIxJ,KAAKyJ,KAAI,YAAYzJ,KAAK+I,SAAQ,cACzE,CAAEsC,SAAYA,EAAUC,SAAYA,GACpC,CAAEzK,QAAOA,KAKjB+H,EAAAzI,UAAAqL,OAAA,eACE5K,EAAOZ,KAAK2J,SAAQ,MAAM3J,KAAKwJ,SAAQ,IAAIxJ,KAAKyJ,KAAI,YAAYzJ,KAAK+I,SAAQ,eAC3E,GAAG/I,KAAKK,OAAQ,KACRQ,EAAS,IAAIC,EAAAA,YAAa,CAAEC,cAAiB,OAAOf,KAAKK,SAC7D,OAAOL,KAAKD,KAAKiB,IAAKJ,EAAK,KAAM,CAAEC,QAAOA,IAEvC,OAAOb,KAAKD,KAAKiB,IAAKJ,EAAK,OAItCgI,EAAAzI,UAAAsL,SAAA,SAASlM,EAAgBmM,GACrB,GAAIA,EAAJ,CACAA,EAAMA,EAAK/K,MAAM,EAAE+K,EAAKvM,QAAQ,MAAQ,QACpCyB,EAAKZ,KAAKmK,sBACd,GAAIvJ,EAAJ,CAEA,GADAA,EAAK,GAAGA,EAAImK,QAAQ,MAAM,YAAc/L,EAAKM,cAAcC,GAAQ,SAASmM,EACzE1L,KAAKK,OAAQ,KACRQ,EAAS,IAAIC,EAAAA,YAAa,CAAEC,cAAiB,OAAOf,KAAKK,SAC7D,OAAOL,KAAKD,KAAKQ,IAAKK,EAAK,CAAEC,QAASA,IAEnC,OAAOb,KAAKD,KAAKQ,IAAIK,0BAhRnCQ,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDARjBC,EAAAA,kBAEAzB,SACA0B,SAEAqD,sKANT,gBCOA,SAAA8G,KAOkC,2BAPjCC,EAAAA,SAAQvK,KAAA,CAAC,CACNwK,QAAS,CAAEC,EAAAA,kBACXC,aAAc,GACdC,QAAS,GACTC,gBAAiB,GACjBC,UAAW,OAEmBP","sourcesContent":["// ** Path utilities\r\nexport class Path {\r\n\r\n    // ** transform dot notation to slash\r\n    static dotToSlash(path:string):string {\r\n        if(path.indexOf('.')!=-1) { return path.split('.').join('/') }\r\n        else { return path }\r\n    }\r\n\r\n    // ** parse context to valid Signal K path\r\n    static contextToPath(context:string):string {\r\n        let res= (context=='self' ) ? 'vessels.self': context;\r\n        return res.split('.').join('/');\r\n    }    \r\n\r\n}\r\n\r\n// ** Message templates **\r\nexport class Message {\r\n   \r\n    // ** return UPDATES message object\r\n    static updates() { \r\n        // array values= { values: [ {path: xx, value: xx } ] }\r\n        return { \r\n            context: null,\r\n            updates: [] \r\n        }\r\n    }\r\n    // ** return SUBSCRIBE message object\r\n    static subscribe() { \r\n        /* array values= {\r\n            \"path\": \"path.to.key\",\r\n            \"period\": 1000,\r\n            \"format\": \"delta\",\r\n            \"policy\": \"ideal\",\r\n            \"minPeriod\": 200\r\n            } */\r\n        return { \r\n            context: null,\r\n            subscribe: [] \r\n        }\r\n    }    \r\n    // ** return UNSUBSCRIBE message object\r\n    static unsubscribe() { \r\n        // array values= { \"path\": \"path.to.key\" }\r\n        return { \r\n            context: null,\r\n            unsubscribe: [] \r\n        }\r\n    }  \r\n    // ** return REQUEST message object\r\n    static request() { \r\n        return { \r\n            requestId: null\r\n        }\r\n    }           \r\n\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Path } from './utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKHttp {\r\n\r\n    private _token: string;\r\n\r\n    // **************** ATTRIBUTES ***************************\r\n\r\n    public endpoint: string;\r\n    // ** set auth token value **\r\n    set token(val:string) { this._token= val }    \r\n\r\n    // *******************************************************\r\n\r\n    constructor( private http: HttpClient ) { }   \r\n    \r\n    // ** get the contents of the Signal K tree pointed to by self. returns: Observable \r\n    getSelf() { return this.get(`vessels/self`) }\r\n\r\n    //** get ID of vessel self via http. returns: Observable \r\n    getSelfId() { return this.get(`self`) }\r\n\r\n    // ** return observable response for meta object at the specified context and path\r\n    getMeta(context:string, path:string) { \r\n        return this.get(`${Path.contextToPath(context)}/${Path.dotToSlash(path)}/meta`);\r\n    }    \r\n\r\n    //** get API path value via http. returns: Observable \r\n    get(path:string) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= this.endpoint + Path.dotToSlash(path);\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.get( url, { headers: headers } );\r\n        }\r\n        else { return this.http.get(url) }\r\n    }\r\n\r\n    //** send value to API path via http put. returns: Observable \r\n\tput(context:string, path:string, value:any);\r\n\tput(context:string, path:string, key:any, value:any);\r\n    put(context:string, path:string, key?:any, value?:any) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= this.endpoint + Path.contextToPath(context) + '/' + Path.dotToSlash(path);\r\n        let msg = { value: {} } \r\n        if(typeof value=='undefined') { msg.value= key }\r\n\t\telse { msg.value[key]= value }\r\n\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.put(url, msg, { headers: headers } );\r\n        }        \r\n        else { return this.http.put(url, msg) }\r\n    } \r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { Message } from './utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKStream {\r\n\r\n\tprivate _connect: Subject<any>;\r\n    private _close: Subject<any>;\r\n\tprivate _error: Subject<any>;\r\n\tprivate _message: Subject<any>;\r\n\r\n    private ws: any;    \r\n    private _filter= null;               // ** id of vessel to filter delta messages\r\n    private _wsTimeout= 20000;           // ** websocket connection timeout  \r\n    private _token: string;  \r\n    private _playbackMode: boolean= false;\r\n    \r\n   // **************** ATTRIBUTES ***************************\r\n\r\n    public onConnect: Observable<any>;\t\t\r\n    public onClose: Observable<any>;\t\r\n    public onError: Observable<any>; \t\r\n    public onMessage: Observable<any>;\r\n\r\n    public endpoint: string;\r\n    public selfId: string;\r\n\r\n    // ** set auth token value **\r\n    set token(val:string) { this._token= val }    \r\n    // ** get / set websocket connection timeout 3000<=timeout<=60000 **\r\n    get connectionTimeout():number { return this._wsTimeout }\r\n    set connectionTimeout(val:number) {\r\n        this._wsTimeout= (val<3000) ? 3000 : (val>60000) ? 60000 : val;\r\n    }   \r\n    // ** is WS Stream connected?\r\n    get isOpen():boolean { \r\n        return (this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) ? true : false;\r\n    }  \r\n    // ** get / set filter to select delta messages just for supplied vessel id   \r\n    get filter():string { return this._filter }\r\n    // ** set filter= null to remove message filtering\r\n    set filter(id:string) { \r\n        if( id && id.indexOf('self')!=-1 ) {  // ** self\r\n            this._filter= (this.selfId) ? this.selfId : null;\r\n        }\r\n        else { this._filter= id }\r\n    }   \r\n    // ** returns true if Playback Hello message\r\n    get playbackMode():boolean { return this._playbackMode }\r\n\r\n    // ******************************************************\r\n\r\n    constructor( ) { \r\n        this._connect= new Subject<any>();\r\n        this.onConnect= this._connect.asObservable();   \r\n        this._close= new Subject<any>();\r\n        this.onClose= this._close.asObservable();  \r\n        this._error= new Subject<any>();\r\n        this.onError= this._error.asObservable();  \r\n        this._message= new Subject<any>();\r\n        this.onMessage= this._message.asObservable();         \r\n    }   \r\n\r\n    // ** Close WebSocket connection\r\n    close() { if(this.ws) { this.ws.close(); this.ws= null; } }\r\n   \r\n\t// ** Open a WebSocket at provided url\r\n\topen(url:string, subscribe?:string, token?:string) {\r\n        url= (url) ? url : this.endpoint;\r\n        if(!url) { return }\r\n        let q= (url.indexOf('?')==-1) ? '?' : '&'\r\n        if(subscribe) { url+=`${q}subscribe=${subscribe}` } \r\n        if(this._token || token) { url+= `${(subscribe) ? '&' : '?'}token=${this._token || token}` } \r\n        \r\n        this.close();\r\n        this.ws = new WebSocket(url);\r\n        // ** start connection watchdog **\r\n        setTimeout( \r\n            ()=>{\r\n                if(this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) { \r\n                    console.warn(`Connection watchdog expired (${this._wsTimeout/1000} sec): ${this.ws.readyState}... aborting connection...`);\r\n                    this.close(); \r\n                }\r\n            }, this._wsTimeout\r\n        );\r\n\t\t\r\n\t\tthis.ws.onopen= e=> { this._connect.next(e) }\r\n\t\tthis.ws.onclose= e=> { this._close.next(e) }\r\n\t\tthis.ws.onerror= e=> { this._error.next(e) }\r\n\t\tthis.ws.onmessage= e=> {\r\n            let data: any;\r\n            if(typeof e.data === 'string') {\r\n                try { data= JSON.parse(e.data) }\r\n                catch(e) { return }\r\n            }\r\n            if(this.isHello(data)) { \r\n                this.selfId= data.self;\r\n                this._playbackMode= (typeof data.startTime!= 'undefined') ? true : false;                 \r\n                this._message.next(data);\r\n            }          \r\n            else if(this._filter && this.isDelta(data)) {\r\n                if(data.context== this._filter) { this._message.next(data) } \r\n            }                \r\n            else { this._message.next(data) } \r\n\t\t}\r\n    }      \r\n\r\n    // ** send data to Signal K stream\r\n    send(data:any) {\r\n        if(this.ws) {\r\n            if(typeof data === 'object') { data= JSON.stringify(data) }\r\n            this.ws.send(data);\r\n        }\r\n    }\r\n\r\n    // ** send value(s) via delta stream update **\r\n    sendUpdate(context:string, path:Array<any>);\r\n    sendUpdate(context:string, path:string, value:any);\r\n    sendUpdate(context:string='self', path: string | Array<any>, value?:any) {\r\n        let val= Message.updates();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        let uValues= [];\r\n        if(typeof path === 'string') {\r\n            uValues.push({ path: path, value: value });\r\n        }\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n            uValues= path;\r\n        }\r\n        val.updates.push({ values: uValues } ); \r\n        this.send(val);\r\n    }\r\n\r\n    // ** Subscribe to Delta stream messages options: {..}**\r\n    subscribe(context:string, path:Array<any>);\r\n    subscribe(context:string, path:string, options?:any);\r\n    subscribe(context:string='*', path:string | Array<any>='*', options?:any) {\r\n        let val= Message.subscribe();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n           val.subscribe= path;\r\n        }\r\n        if(typeof path === 'string') {\r\n            let sValue= {};\r\n            sValue['path']= path;\r\n            if(options && typeof options === 'object') {\r\n                if(options['period']) { sValue['period']= options['period'] }\r\n                if(options['minPeriod']) { sValue['minPeriod']= options['period'] }\r\n                if(options['format'] && \r\n                    (options['format']=='delta' || options['format']=='full') ) { \r\n                        sValue['format']= options['format'];\r\n                }\r\n                if(options['policy'] && \r\n                    (options['policy']=='instant' || options['policy']=='ideal'\r\n                    || options['policy']=='fixed') ) { \r\n                        sValue['policy']= options['policy'];\r\n                }\r\n            }\r\n            val.subscribe.push(sValue);\r\n        }\r\n        this.send(val);        \r\n    }\r\n\r\n    // ** Unsubscribe from Delta stream messages **\r\n    unsubscribe(context:string='*', path:any='*') {\r\n        let val= Message.unsubscribe();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n           val.unsubscribe= path;\r\n        }\r\n        if(typeof path === 'string') { val.unsubscribe.push({path: path}) }\r\n        this.send(val); \r\n    }\r\n\r\n    // *************** MESSAGE PARSING ******************************\r\n    // ** returns true if message context is 'self'\r\n    isSelf(msg:any):boolean { return (msg.context== this.selfId) }\r\n    // ** returns true if message is a Delta message\r\n    isDelta(msg:any):boolean { return typeof msg.context!= 'undefined' }\r\n    // ** returns true if message is a Hello message\r\n    isHello(msg:any):boolean { \r\n        return (typeof msg.version!= 'undefined' && typeof msg.self!= 'undefined');\r\n    }     \r\n    // ** returns true if message is a request Response message\r\n    isResponse(msg:any):boolean { return typeof msg.requestId!= 'undefined' } \r\n}","/** Web Worker Service\r\n * ************************************/\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKStreamWorker  {\r\n\r\n\tprivate _error: Subject<any>;\r\n\tprivate _message: Subject<any>;\r\n    private worker: Worker;\r\n    \r\n   // **************** ATTRIBUTES ***************************\r\n\t\r\n    public onError: Observable<any>; \t\r\n    public onMessage: Observable<any>;\t\r\n\r\n   // *******************************************************    \r\n\r\n    constructor() {\r\n        this._error= new Subject<string>();\r\n        this.onError= this._error.asObservable();  \r\n        this._message= new Subject<string>();\r\n        this.onMessage= this._message.asObservable();   \r\n    } \r\n\r\n    ngOnDestroy() { this.worker.terminate(); this.worker = undefined; }\r\n\r\n    // ** Initialise worker\r\n    init(pathToFile:string) { \r\n        if(typeof(Worker)== \"undefined\") { return false }\r\n        if(this.worker) { this.worker.terminate() }   // ** terminate an open worker\r\n\r\n        this.worker= new Worker(pathToFile);\r\n        this.worker.onmessage= event=> { this._message.next(event) };\r\n        this.worker.onerror= event=> { this._error.next(event) };           \r\n        // ** worker ready for postMessage()\r\n    }    \r\n    \r\n    // ** Send message to worker\r\n    postMessage(msg:any) { if(this.worker) {this.worker.postMessage(msg) } }\r\n\r\n    // ** terminate worker\r\n    terminate() { if(this.worker) {this.worker.terminate()} }\r\n}","/*\r\n * UUID: A js library to generate and parse UUIDs, TimeUUIDs and generate\r\n * TimeUUID based on dates for range selections.\r\n * @see http://www.ietf.org/rfc/rfc4122.txt\r\n **/\r\nexport class UUID {\r\n\r\n    private limitUI04;\r\n    private limitUI06;\r\n    private limitUI08;\r\n    private limitUI12;\r\n    private limitUI14;\r\n    private limitUI16;\r\n    private limitUI32;\r\n    private limitUI40;\r\n    private limitUI48;\r\n\r\n    private version:number;\r\n    private hex:string;\r\n\r\n    constructor() {\r\n        this.limitUI04 = this.maxFromBits(4);\r\n        this.limitUI06 = this.maxFromBits(6);\r\n        this.limitUI08 = this.maxFromBits(8);\r\n        this.limitUI12 = this.maxFromBits(12);\r\n        this.limitUI14 = this.maxFromBits(14);\r\n        this.limitUI16 = this.maxFromBits(16);\r\n        this.limitUI32 = this.maxFromBits(32);\r\n        this.limitUI40 = this.maxFromBits(40);\r\n        this.limitUI48 = this.maxFromBits(48); \r\n\r\n        this.create();\r\n    }\r\n\r\n    toString() { return this.hex }\r\n    toURN() { return 'urn:uuid:' + this.hex }\r\n    toSignalK():string  { return `urn:mrn:signalk:uuid:${this.hex}` }\r\n    toBytes() {\r\n        let parts = this.hex.split('-');\r\n        let ints = [];\r\n        let intPos = 0;\r\n        for (let i = 0; i < parts.length; i++) {\r\n            for (let j = 0; j < parts[i].length; j+=2) {\r\n            ints[intPos++] = parseInt(parts[i].substr(j, 2), 16);\r\n            }\r\n        }\r\n        return ints;\r\n    };    \r\n\r\n    private maxFromBits(bits) { return Math.pow(2, bits) };\r\n\r\n    private getRandomInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min }\r\n\r\n    private randomUI04() { return this.getRandomInt(0, this.limitUI04-1) }\r\n    private randomUI06() { return this.getRandomInt(0, this.limitUI06-1);}\r\n    private randomUI08() { return this.getRandomInt(0, this.limitUI08-1) }\r\n    private randomUI12() { return this.getRandomInt(0, this.limitUI12-1) }\r\n    private randomUI14() { return this.getRandomInt(0, this.limitUI14-1) }\r\n    private randomUI16() { return this.getRandomInt(0, this.limitUI16-1) }\r\n    private randomUI32() { return this.getRandomInt(0, this.limitUI32-1) }\r\n    private randomUI40() { return (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << 40 - 30)) * (1 << 30) }\r\n    private randomUI48() { return (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << 48 - 30)) * (1 << 30) }\r\n\r\n    private create() {\r\n        this.fromParts(\r\n            this.randomUI32(),\r\n            this.randomUI16(),\r\n            0x4000 | this.randomUI12(),\r\n            0x80   | this.randomUI06(),\r\n            this.randomUI08(),\r\n            this.randomUI48()\r\n        );\r\n    };\r\n\r\n    private paddedString(string, length, z=null) {\r\n        string = String(string);\r\n        z = (!z) ? '0' : z;\r\n        let i = length - string.length;\r\n        for (; i > 0; i >>>= 1, z += z) {\r\n            if (i & 1) {\r\n            string = z + string;\r\n            }\r\n        }\r\n        return string;\r\n    };\r\n\r\n    private fromParts(timeLow, timeMid, timeHiAndVersion, clockSeqHiAndReserved, clockSeqLow, node) {\r\n        this.version = (timeHiAndVersion >> 12) & 0xF;\r\n        this.hex = this.paddedString(timeLow.toString(16), 8)\r\n            + '-'\r\n            + this.paddedString(timeMid.toString(16), 4)\r\n            + '-'\r\n            + this.paddedString(timeHiAndVersion.toString(16), 4)\r\n            + '-'\r\n            + this.paddedString(clockSeqHiAndReserved.toString(16), 2)\r\n            + this.paddedString(clockSeqLow.toString(16), 2)\r\n            + '-'\r\n            + this.paddedString(node.toString(16), 12);\r\n        return this;\r\n    };    \r\n    \r\n    /*\r\n    private getTimeFieldValues(time) {\r\n        let ts = time - Date.UTC(1582, 9, 15);\r\n        let hm = ((ts / 0x100000000) * 10000) & 0xFFFFFFF;\r\n        return { low: ((ts & 0xFFFFFFF) * 10000) % 0x100000000,\r\n                mid: hm & 0xFFFF, hi: hm >>> 16, timestamp: ts };\r\n    };\r\n\r\n    fromTime(time, last:boolean) {\r\n        last = (!last) ? false : last;\r\n        let tf = this.getTimeFieldValues(time);\r\n        let tl = tf.low;\r\n        let thav = (tf.hi & 0xFFF) | 0x1000;  // set version '0001'\r\n        if (last === false) {\r\n            return new UUID().fromParts(tl, tf.mid, thav, 0, 0, 0);\r\n        } else {\r\n            return new UUID().fromParts(tl, tf.mid, thav, 0x80 | this.limitUI06, this.limitUI08 - 1, this.limitUI48 - 1);\r\n        }\r\n    };\r\n\r\n    firstFromTime(time) { return this.fromTime(time, false) }\r\n    lastFromTime(time) { return this.fromTime(time, true) }\r\n    \r\n    \r\n    equals(uuid) {\r\n        if (!(uuid instanceof UUID)) { return false }\r\n        if (this.hex !== uuid.hex) { return false }\r\n        return true;\r\n    };\r\n\r\n    fromURN(strId) {\r\n        let r;\r\n        let p = /^(?:urn:uuid:|\\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(?:\\})?$/i;\r\n        if ((r = p.exec(strId))) {\r\n            return this.fromParts(\r\n                parseInt(r[1], 16), parseInt(r[2], 16),\r\n                parseInt(r[3], 16), parseInt(r[4], 16),\r\n                parseInt(r[5], 16), parseInt(r[6], 16)\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    fromBytes(ints) {\r\n        if (ints.length < 5) { return null }\r\n        let str = '';\r\n        let pos = 0;\r\n        let parts = [4, 2, 2, 2, 6];\r\n        for (let i = 0; i < parts.length; i++) {\r\n            for (let j = 0; j < parts[i]; j++) {\r\n            let octet = ints[pos++].toString(16);\r\n            if (octet.length == 1) {\r\n                octet = '0' + octet;\r\n            }\r\n            str += octet;\r\n            }\r\n            if (parts[i] !== 6) {\r\n            str += '-';\r\n            }\r\n        }\r\n        return this.fromURN(str);\r\n    };\r\n\r\n    fromBinary(binary) {\r\n        let ints = [];\r\n        for (let i = 0; i < binary.length; i++) {\r\n            ints[i] = binary.charCodeAt(i);\r\n            if (ints[i] > 255 || ints[i] < 0) {\r\n            throw new Error('Unexpected byte in binary data.');\r\n            }\r\n        }\r\n        return this.fromBytes(ints);\r\n    };\r\n    */\r\n\r\n};","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { SignalKHttp } from './http-api';\nimport { SignalKStream } from './stream-api';\nimport { Path, Message } from './utils';\nimport { SignalKStreamWorker} from './stream-worker';\nimport { UUID } from './uuid';\n\n@Injectable({ providedIn: 'root' })\nexport class SignalKClient {\n    \n    private hostname: string;\n    private port: number;\n    private protocol: string;\n  \n    private _version: string= 'v1';      // ** default Signal K api version\n    private _token: string;             // token for when security is enabled on the server\n\n    private debug(val: any) { if(isDevMode()){ console.log(val) } }\n    \n    // **************** ATTRIBUTES ***************************\n\n    // ** server information block **\n    public server= {\n        endpoints: {},\n        info: {},\n        apiVersions: []\n    }    \n    // ** get / set Signal K preferred api version to use **\n    get version():number { return parseInt( this._version.slice(1) ) }\n    set version(val: number) {\n        let v:string= 'v'+ val;\n        if(this.server.apiVersions.length==0) { \n            this._version= v;\n            this.debug(`Signal K api version set to: ${v}`);\n        }\n        else {\n            this._version= (this.server.apiVersions.indexOf(v)!=-1) ? v : this._version;\n            this.debug(`Signal K api version set request: ${v}, result: ${this._version}`);\n        }\n    }\n    // ** set auth token value **\n    set authToken(val:string) { \n        this._token= val;\n        this.api.token= val;\n        this.stream.token= val;\n    }    \n    // ** Message Object\n    get message() { return Message }\n\n    // ** generate and return a UUID object\n    get uuid():UUID { return new UUID() }\n\n    // *******************************************************\n    constructor( private http: HttpClient, \n                public api: SignalKHttp, \n                public stream: SignalKStream,\n                public worker: SignalKStreamWorker ) { \n        this.init();                          \n    }\n\n    ngOnDestroy() { this.stream.close() }   \n    \n    // ** initialise protocol, hostname, port values\n    private init(hostname:string='localhost', port:number=null, useSSL:boolean=false) {\n        this.hostname = hostname;\n        if(useSSL) {\n            this.protocol = 'https';\n            this.port = port || 443;\n        } \n        else {\n            this.protocol = 'http';\n            this.port = port || 80;\n        }        \n    }    \n\n    // **************** CONNECTION AND DISCOVERY  ********************\n\n    // ** Signal K server endpoint discovery request (/signalk).  \n    hello(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        this.init(hostname, port, useSSL);\n        return this.get('/signalk');\n    }    \n    // ** connect to server (endpoint discovery) and DO NOT open Stream\n    connect(hostname:string=null, port:number=null, useSSL:boolean=false): Promise<any> {\n        return new Promise( (resolve, reject)=> {\n            this.debug('Contacting Signal K server.........');\n            this.hello(hostname, port, useSSL).subscribe(    // ** discover endpoints **\n                response=> { \n                    if(this.stream) { this.stream.close() }\n                    this.processHello(response);\n                    this.api.endpoint= this.resolveHttpEndpoint();\n                    this.stream.endpoint= this.resolveStreamEndpoint();\n                    resolve(true);\n                },\n                error=> { \n                    this.disconnectedFromServer();       \n                    reject(error);\n                }\n            );\n        });\n    }    \n\n    // ** disconnect from server\n    disconnect() { this.stream.close(); this.worker.terminate(); }\n    \n    // ** Connect + open Delta Stream (endpoint discovery)\n    connectStream(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        return new Promise( (resolve, reject)=> {\n            this.connect(hostname, port, useSSL)\n            .then( ()=> { \n                // ** connect to stream api at preferred version else fall back to default version\n                let url= this.resolveStreamEndpoint();\n                if(!url) { \n                    reject( new Error('Server has no advertised Stream endpoints!') );\n                    return;\n                }\n                this.stream.open(url, subscribe);\n                resolve( true );\n            })\n            .catch( e=> { reject( e ) });\n        });\n    } \n\n    // ** connect to playback stream (endpoint discovery)\n    connectPlayback(hostname:string=null, port:number=null, useSSL:boolean=false, options:any) {\n        return new Promise( (resolve, reject)=> {\n            this.connect(hostname, port, useSSL)\n            .then( ()=> { \n                // ** connect to playback api at preferred version else fall back to default version\n                this.openPlayback(null, options, this._token);\n                resolve( true );\n            })\n            .catch( e=> { reject( e ) });\n        })\n    }      \n\n    // ** connect to delta stream with (NO endpoint discovery)\n    openStream(url:string=null, subscribe?:string, token?:string) {\n        this.debug('openStream.........');  \n        if(!url) {     // connect to stream api at discovered endpoint\n            url= this.resolveStreamEndpoint();\n            if(!url) { \n                return( new Error('Server has no advertised Stream endpoints!') );\n            }\n        }\n        this.stream.open(url, subscribe, token);  \n        return true;      \n    }   \n\n    // ** connect to playback stream (NO endpoint discovery)\n    openPlayback(url:string=null, options?:any, token?:string) {\n        this.debug('openPlayback.........');\n        if(!url) {     // connect to stream api at discovered endpoint\n            url= this.resolveStreamEndpoint();\n            if(!url) { \n                return( new Error('Server has no advertised Stream endpoints!') );\n            }\n            url= url.replace('stream', 'playback');\n        }        \n        let pb= '';\n        let subscribe: string;\n        if(options && typeof options ==='object'){\n            pb+= (options.startTime) ? '?startTime=' + options.startTime.slice(0,options.startTime.indexOf('.')) + 'Z' : '';\n            pb+= (options.playbackRate) ? `&playbackRate=${options.playbackRate}` : '';\n            subscribe= (options.subscribe) ? options.subscribe : null;            \n        }\n        this.stream.open(url + pb, subscribe, token); \n        return true;\n    }      \n\n    // ** process Hello response \n    private processHello(response: any) {\n        this.server.endpoints= (response['endpoints']) ? response['endpoints'] : {};\n        this.server.info= (response['server']) ? response['server'] : {};\n        this.server.apiVersions= (this.server.endpoints) ? Object.keys(this.server.endpoints) : [];\n        this.debug(this.server.endpoints);\n    }\n\n    // ** return preferred WS stream url\n    public resolveStreamEndpoint():string {\n        if(this.server.endpoints[this._version] && this.server.endpoints[this._version]['signalk-ws']) {\n            this.debug(`Connecting endpoint version: ${this._version}`);\n            return `${this.server.endpoints[this._version]['signalk-ws']}`;\n        }\n        else if(this.server.endpoints['v1'] && this.server.endpoints['v1']['signalk-ws']) { \n            this.debug(`Connection falling back to: v1`);\n            return `${this.server.endpoints['v1']['signalk-ws']}` \n        }\n        else { return null }\n    }  \n\n    // ** return signalk-http endpoint url\n    private resolveHttpEndpoint():string {\n        let url: string;\n        if(this.server.endpoints[this._version]) { // ** connection made\n            // ** connect to http endpoint at prescribed version else fall back to default version\n            if(this.server.endpoints[this._version]['signalk-http']) {\n                url= `${this.server.endpoints[this._version]['signalk-http']}`;\n            }\n            else { url= `${this.server.endpoints['v1']['signalk-http']}` }   \n        } \n        else {\n            let msg= 'No current connection http endpoint service! Use connect() to establish a connection.'\n            this.debug(msg);\n        } \n        return url;   \n    }    \n    \n    // ** cleanup on server disconnection\n    private disconnectedFromServer() {\n        this.server.endpoints= {};\n        this.server.info= {};\n        this.server.apiVersions= [];  \n    }\n\n    //** return observable response from http path\n    get(path:string) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`get ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }        \n    };  \n\n    //** return observable response for put to http path\n    put(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`put ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, { headers: headers } );\n        }\n        else { return this.http.put(url, value) }        \n    };\n\n    //** return observable response for post to http path\n    post(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`post ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.post( url, { headers: headers } );\n        }\n        else { return this.http.post(url, value) }        \n    };   \n\n    // ** get auth token for supplied user details **\n    login(username:string, password:string) {\n        let headers= new HttpHeaders().set('Content-Type', `application/json`);\n        return this.http.post(\n            `${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/login`,\n            { \"username\": username, \"password\": password },\n            { headers }\n        );\n    }\n\t\n    // ** logout from server **\n    logout() {\n\t\tlet url=`${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/logout`;\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, null, { headers } );\n        }        \n        else { return this.http.put( url, null ) }\n    }\t   \n    \n    //** get data via the snapshot http api path for supplied time\n    snapshot(context:string, time:string) { \n        if(!time) { return }\n        time= time.slice(0,time.indexOf('.')) + 'Z';\n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        url= `${url.replace('api','snapshot')}${Path.contextToPath(context)}?time=${time}`;\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }\n    }\n\n}\n","/*****************************\r\n * SignalKClient Module:\r\n *****************************/\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule} from '@angular/common/http';\r\n\r\n@NgModule({\r\n    imports: [ HttpClientModule ],    \r\n    declarations: [],\r\n    exports: [],\r\n    entryComponents: [], \r\n    providers: []  \r\n})\r\nexport class SignalKClientModule {}\r\n\r\nexport * from './signalk-client';"]}