{"version":3,"sources":["ng://signalk-client-angular/lib/utils.ts","ng://signalk-client-angular/lib/http-api.ts","ng://signalk-client-angular/lib/stream-api.ts","ng://signalk-client-angular/lib/stream-worker.ts","ng://signalk-client-angular/lib/signalk-client.ts","ng://signalk-client-angular/lib/signalk-client.module.ts"],"names":["Path","dotToSlash","path","indexOf","split","join","contextToPath","context","Message","updates","subscribe","unsubscribe","request","requestId","SignalKHttp","http","this","Object","defineProperty","prototype","val","_token","getSelf","get","getSelfId","getMeta","endpoint","slice","url","headers","HttpHeaders","Authorization","put","key","value","msg","Injectable","args","providedIn","HttpClient","SignalKStream","_filter","_wsTimeout","_connect","Subject","onConnect","asObservable","_close","onClose","_error","onError","_message","onMessage","ws","readyState","id","selfId","close","open","token","_this","q","WebSocket","setTimeout","console","warn","onopen","e","next","onclose","onerror","onmessage","data","JSON","parse","isHello","self","isDelta","send","stringify","sendUpdate","uValues","push","Array","isArray","values","options","sValue","isSelf","version","isResponse","SignalKStreamWorker","ngOnDestroy","worker","terminate","undefined","init","pathToFile","Worker","event","postMessage","SignalKClient","api","stream","_version","server","endpoints","info","apiVersions","debug","isDevMode","log","parseInt","v","length","hostname","port","useSSL","protocol","hello","connect","Promise","resolve","reject","response","processHello","resolveHttpEndpoint","resolveStreamEndpoint","error","disconnectedFromServer","disconnect","connectStream","then","Error","catch","connectPlayback","openPlayback","openStream","replace","pb","startTime","playbackRate","keys","post","login","username","password","set","logout","snapshot","time","SignalKClientModule","NgModule","imports","HttpClientModule","declarations","exports","entryComponents","providers"],"mappings":"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","sourcesContent":["// ** Path utilities\r\nexport class Path {\r\n\r\n    // ** transform dot notation to slash\r\n    static dotToSlash(path:string):string {\r\n        if(path.indexOf('.')!=-1) { return path.split('.').join('/') }\r\n        else { return path }\r\n    }\r\n\r\n    // ** parse context to valid Signal K path\r\n    static contextToPath(context:string):string {\r\n        let res= (context=='self' ) ? 'vessels.self': context;\r\n        return res.split('.').join('/');\r\n    }    \r\n\r\n}\r\n\r\n// ** Message templates **\r\nexport class Message {\r\n   \r\n    // ** return UPDATES message object\r\n    static updates() { \r\n        // array values= { values: [ {path: xx, value: xx } ] }\r\n        return { \r\n            context: null,\r\n            updates: [] \r\n        }\r\n    }\r\n    // ** return SUBSCRIBE message object\r\n    static subscribe() { \r\n        /* array values= {\r\n            \"path\": \"path.to.key\",\r\n            \"period\": 1000,\r\n            \"format\": \"delta\",\r\n            \"policy\": \"ideal\",\r\n            \"minPeriod\": 200\r\n            } */\r\n        return { \r\n            context: null,\r\n            subscribe: [] \r\n        }\r\n    }    \r\n    // ** return UNSUBSCRIBE message object\r\n    static unsubscribe() { \r\n        // array values= { \"path\": \"path.to.key\" }\r\n        return { \r\n            context: null,\r\n            unsubscribe: [] \r\n        }\r\n    }  \r\n    // ** return REQUEST message object\r\n    static request() { \r\n        return { \r\n            requestId: null\r\n        }\r\n    }           \r\n\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Path } from './utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKHttp {\r\n\r\n    private _token: string;\r\n\r\n    // **************** ATTRIBUTES ***************************\r\n\r\n    public endpoint: string;\r\n    // ** set auth token value **\r\n    set token(val:string) { this._token= val }    \r\n\r\n    // *******************************************************\r\n\r\n    constructor( private http: HttpClient ) { }   \r\n    \r\n    // ** get the contents of the Signal K tree pointed to by self. returns: Observable \r\n    getSelf() { return this.get(`vessels/self`) }\r\n\r\n    //** get ID of vessel self via http. returns: Observable \r\n    getSelfId() { return this.get(`self`) }\r\n\r\n    // ** return observable response for meta object at the specified context and path\r\n    getMeta(context:string, path:string) { \r\n        return this.get(`${Path.contextToPath(context)}/${Path.dotToSlash(path)}/meta`);\r\n    }    \r\n\r\n    //** get API path value via http. returns: Observable \r\n    get(path:string) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= this.endpoint + Path.dotToSlash(path);\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.get( url, { headers: headers } );\r\n        }\r\n        else { return this.http.get(url) }\r\n    }\r\n\r\n    //** send value to API path via http put. returns: Observable \r\n\tput(context:string, path:string, value:any);\r\n\tput(context:string, path:string, key:any, value:any);\r\n    put(context:string, path:string, key?:any, value?:any) { \r\n        if(!this.endpoint) { return }\r\n        if(path[0]=='/') { path= path.slice(1) }\r\n        let url= this.endpoint + Path.contextToPath(context) + '/' + Path.dotToSlash(path);\r\n        let msg = { value: {} } \r\n        if(typeof value=='undefined') { msg.value= key }\r\n\t\telse { msg.value[key]= value }\r\n\r\n        if(this._token) {\r\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\r\n            return this.http.put(url, msg, { headers: headers } );\r\n        }        \r\n        else { return this.http.put(url, msg) }\r\n    } \r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { Message } from './utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKStream {\r\n\r\n\tprivate _connect: Subject<any>;\r\n    private _close: Subject<any>;\r\n\tprivate _error: Subject<any>;\r\n\tprivate _message: Subject<any>;\r\n\r\n    private ws: any;    \r\n    private _filter= null;               // ** id of vessel to filter delta messages\r\n    private _wsTimeout= 20000;           // ** websocket connection timeout  \r\n    private _token: string;  \r\n    \r\n   // **************** ATTRIBUTES ***************************\r\n\r\n    public onConnect: Observable<any>;\t\t\r\n    public onClose: Observable<any>;\t\r\n    public onError: Observable<any>; \t\r\n    public onMessage: Observable<any>;\r\n\r\n    public endpoint: string;\r\n    public selfId: string;\r\n\r\n    // ** set auth token value **\r\n    set token(val:string) { this._token= val }    \r\n    // ** get / set websocket connection timeout 3000<=timeout<=60000 **\r\n    get connectionTimeout():number { return this._wsTimeout }\r\n    set connectionTimeout(val:number) {\r\n        this._wsTimeout= (val<3000) ? 3000 : (val>60000) ? 60000 : val;\r\n    }   \r\n    // ** is WS Stream connected?\r\n    get isOpen():boolean { \r\n        return (this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) ? true : false;\r\n    }  \r\n    // ** get / set filter to select delta messages just for supplied vessel id   \r\n    get filter():string { return this._filter }\r\n    // ** set filter= null to remove message filtering\r\n    set filter(id:string) { \r\n        if( id && id.indexOf('self')!=-1 ) {  // ** self\r\n            this._filter= (this.selfId) ? this.selfId : null;\r\n        }\r\n        else { this._filter= id }\r\n    }    \r\n\r\n    // ******************************************************\r\n\r\n    constructor( ) { \r\n        this._connect= new Subject<any>();\r\n        this.onConnect= this._connect.asObservable();   \r\n        this._close= new Subject<any>();\r\n        this.onClose= this._close.asObservable();  \r\n        this._error= new Subject<any>();\r\n        this.onError= this._error.asObservable();  \r\n        this._message= new Subject<any>();\r\n        this.onMessage= this._message.asObservable();         \r\n    }   \r\n\r\n    // ** Close WebSocket connection\r\n    close() { if(this.ws) { this.ws.close(); this.ws= null; } }\r\n   \r\n\t// ** Open a WebSocket at provided url\r\n\topen(url:string, subscribe?:string, token?:string) {\r\n        url= (url) ? url : this.endpoint;\r\n        if(!url) { return }\r\n        let q= (url.indexOf('?')==-1) ? '?' : '&'\r\n        if(subscribe) { url+=`${q}subscribe=${subscribe}` } \r\n        if(this._token || token) { url+= `${(subscribe) ? '&' : '?'}token=${this._token || token}` } \r\n        \r\n        this.close();\r\n        this.ws = new WebSocket(url);\r\n        // ** start connection watchdog **\r\n        setTimeout( \r\n            ()=>{\r\n                if(this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) { \r\n                    console.warn(`Connection watchdog expired (${this._wsTimeout/1000} sec): ${this.ws.readyState}... aborting connection...`);\r\n                    this.close(); \r\n                }\r\n            }, this._wsTimeout\r\n        );\r\n\t\t\r\n\t\tthis.ws.onopen= e=> { this._connect.next(e) }\r\n\t\tthis.ws.onclose= e=> { this._close.next(e) }\r\n\t\tthis.ws.onerror= e=> { this._error.next(e) }\r\n\t\tthis.ws.onmessage= e=> {\r\n            let data: any;\r\n            if(typeof e.data === 'string') {\r\n                try { data= JSON.parse(e.data) }\r\n                catch(e) { return }\r\n            }\r\n            if(this.isHello(data)) { \r\n                this.selfId= data.self;\r\n                this._message.next(data);\r\n            }          \r\n            else if(this._filter && this.isDelta(data)) {\r\n                if(data.context== this._filter) { this._message.next(data) } \r\n            }                \r\n            else { this._message.next(data) } \r\n\t\t}\r\n    }      \r\n\r\n    // ** send data to Signal K stream\r\n    send(data:any) {\r\n        if(this.ws) {\r\n            if(typeof data === 'object') { data= JSON.stringify(data) }\r\n            this.ws.send(data);\r\n        }\r\n    }\r\n\r\n    // ** send value(s) via delta stream update **\r\n    sendUpdate(context:string, path:any)\r\n    sendUpdate(context:string='self', path:any, value?:any) {\r\n        let val= Message.updates();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        let uValues= [];\r\n        if(typeof path === 'string') {\r\n            uValues.push({ path: path, value: value });\r\n        }\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n            uValues= path;\r\n        }\r\n        val.updates.push({ values: uValues } ); \r\n        this.send(val);\r\n    }\r\n\r\n    // ** Subscribe to Delta stream messages options: {..}**\r\n    subscribe(context:string, path:any);\r\n    subscribe(context:string='*', path:any='*', options?:any) {\r\n        let val= Message.subscribe();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n           val.subscribe= path;\r\n        }\r\n        if(typeof path === 'string') {\r\n            let sValue= {};\r\n            sValue['path']= path;\r\n            if(options && typeof options === 'object') {\r\n                if(options['period']) { sValue['period']= options['period'] }\r\n                if(options['minPeriod']) { sValue['minPeriod']= options['period'] }\r\n                if(options['format'] && \r\n                    (options['format']=='delta' || options['format']=='full') ) { \r\n                        sValue['format']= options['format'];\r\n                }\r\n                if(options['policy'] && \r\n                    (options['policy']=='instant' || options['policy']=='ideal'\r\n                    || options['policy']=='fixed') ) { \r\n                        sValue['policy']= options['policy'];\r\n                }\r\n            }\r\n            val.subscribe.push(sValue);\r\n        }\r\n        this.send(val);        \r\n    }\r\n\r\n    // ** Unsubscribe from Delta stream messages **\r\n    unsubscribe(context:string='*', path:any='*') {\r\n        let val= Message.unsubscribe();\r\n        val.context= (context=='self') ? 'vessels.self' : context;\r\n        if(this._token) { val['token']= this._token }\r\n\r\n        if(typeof path === 'object' && Array.isArray(path) ) {\r\n           val.unsubscribe= path;\r\n        }\r\n        if(typeof path === 'string') { val.unsubscribe.push({path: path}) }\r\n        this.send(val); \r\n    }\r\n\r\n    // *************** MESSAGE PARSING ******************************\r\n    // ** returns true if message context is 'self'\r\n    isSelf(msg:any):boolean { return (msg.context== this.selfId) }\r\n    // ** returns true if message is a Delta message\r\n    isDelta(msg:any):boolean { return typeof msg.context!= 'undefined' }\r\n    // ** returns true if message is a Hello message\r\n    isHello(msg:any):boolean { return typeof msg.version!= 'undefined' }\r\n    // ** returns true if message is a request Response message\r\n    isResponse(msg:any):boolean { return typeof msg.requestId!= 'undefined' } \r\n\r\n}","/** Web Worker Service\r\n * ************************************/\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SignalKStreamWorker  {\r\n\r\n\tprivate _error: Subject<any>;\r\n\tprivate _message: Subject<any>;\r\n    private worker: Worker;\r\n    \r\n   // **************** ATTRIBUTES ***************************\r\n\t\r\n    public onError: Observable<any>; \t\r\n    public onMessage: Observable<any>;\t\r\n\r\n   // *******************************************************    \r\n\r\n    constructor() {\r\n        this._error= new Subject<string>();\r\n        this.onError= this._error.asObservable();  \r\n        this._message= new Subject<string>();\r\n        this.onMessage= this._message.asObservable();   \r\n    } \r\n\r\n    ngOnDestroy() { this.worker.terminate(); this.worker = undefined; }\r\n\r\n    // ** Initialise worker\r\n    init(pathToFile:string) { \r\n        if(typeof(Worker)== \"undefined\") { return false }\r\n        if(this.worker) { this.worker.terminate() }   // ** terminate an open worker\r\n\r\n        this.worker= new Worker(pathToFile);\r\n        this.worker.onmessage= event=> { this._message.next(event) };\r\n        this.worker.onerror= event=> { this._error.next(event) };           \r\n        // ** worker ready for postMessage()\r\n    }    \r\n    \r\n    // ** Send message to worker\r\n    postMessage(msg:any) { if(this.worker) {this.worker.postMessage(msg) } }\r\n\r\n    // ** terminate worker\r\n    terminate() { if(this.worker) {this.worker.terminate()} }\r\n}","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { SignalKHttp } from './http-api';\nimport { SignalKStream } from './stream-api';\nimport { Path, Message } from './utils';\nimport { SignalKStreamWorker} from './stream-worker';\n\n@Injectable({ providedIn: 'root' })\nexport class SignalKClient {\n    \n    private hostname: string;\n    private port: number;\n    private protocol: string;\n  \n    private _version: string= 'v1';      // ** default Signal K api version\n    private _token: string;             // token for when security is enabled on the server\n\n    private debug(val: any) { if(isDevMode()){ console.log(val) } }\n    \n    // **************** ATTRIBUTES ***************************\n\n    // ** server information block **\n    public server= {\n        endpoints: {},\n        info: {},\n        apiVersions: []\n    }    \n    // ** get / set Signal K preferred api version to use **\n    get version():number { return parseInt( this._version.slice(1) ) }\n    set version(val: number) {\n        let v:string= 'v'+ val;\n        if(this.server.apiVersions.length==0) { \n            this._version= v;\n            this.debug(`Signal K api version set to: ${v}`);\n        }\n        else {\n            this._version= (this.server.apiVersions.indexOf(v)!=-1) ? v : this._version;\n            this.debug(`Signal K api version set request: ${v}, result: ${this._version}`);\n        }\n    }\n    // ** set auth token value **\n    set authToken(val:string) { \n        this._token= val;\n        this.api.token= val;\n        this.stream.token= val;\n    }    \n    // ** Message Object\n    get message() { return Message }\n\n    // *******************************************************\n    constructor( private http: HttpClient, \n                public api: SignalKHttp, \n                public stream: SignalKStream,\n                public worker: SignalKStreamWorker ) { \n        this.init();                          \n    }\n\n    ngOnDestroy() { this.stream.close() }   \n    \n    // ** initialise protocol, hostname, port values\n    private init(hostname:string='localhost', port:number=null, useSSL:boolean=false) {\n        this.hostname = hostname;\n        if(useSSL) {\n            this.protocol = 'https';\n            this.port = port || 443;\n        } \n        else {\n            this.protocol = 'http';\n            this.port = port || 80;\n        }        \n    }    \n\n    // **************** CONNECTION AND DISCOVERY  ********************\n\n    // ** Signal K server endpoint discovery request (/signalk).  \n    hello(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        this.init(hostname, port, useSSL);\n        return this.get('/signalk');\n    }    \n    // ** connect to server (endpoint discovery) and DO NOT open Stream\n    connect(hostname:string=null, port:number=null, useSSL:boolean=false): Promise<any> {\n        return new Promise( (resolve, reject)=> {\n            this.debug('Contacting Signal K server.........');\n            this.hello(hostname, port, useSSL).subscribe(    // ** discover endpoints **\n                response=> { \n                    if(this.stream) { this.stream.close() }\n                    this.processHello(response);\n                    this.api.endpoint= this.resolveHttpEndpoint();\n                    this.stream.endpoint= this.resolveStreamEndpoint();\n                    resolve(true);\n                },\n                error=> { \n                    this.disconnectedFromServer();       \n                    reject(error);\n                }\n            );\n        });\n    }    \n\n    // ** disconnect from server\n    disconnect() { this.stream.close(); this.worker.terminate(); }\n    \n    // ** Connect + open Delta Stream (endpoint discovery)\n    connectStream(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        return new Promise( (resolve, reject)=> {\n            this.connect(hostname, port, useSSL)\n            .then( ()=> { \n                // ** connect to stream api at preferred version else fall back to default version\n                let url= this.resolveStreamEndpoint();\n                if(!url) { \n                    reject( new Error('Server has no advertised Stream endpoints!') );\n                    return;\n                }\n                this.stream.open(url, subscribe);\n                resolve( true );\n            })\n            .catch( e=> { reject( e ) });\n        });\n    } \n\n    // ** connect to playback stream (endpoint discovery)\n    connectPlayback(hostname:string=null, port:number=null, useSSL:boolean=false, options:any) {\n        return new Promise( (resolve, reject)=> {\n            this.connect(hostname, port, useSSL)\n            .then( ()=> { \n                // ** connect to playback api at preferred version else fall back to default version\n                this.openPlayback(null, options, this._token);\n                resolve( true );\n            })\n            .catch( e=> { reject( e ) });\n        })\n    }      \n\n    // ** connect to delta stream with (NO endpoint discovery)\n    openStream(url:string=null, subscribe?:string, token?:string) {\n        this.debug('openStream.........');  \n        if(!url) {     // connect to stream api at discovered endpoint\n            url= this.resolveStreamEndpoint();\n            if(!url) { \n                return( new Error('Server has no advertised Stream endpoints!') );\n            }\n        }\n        this.stream.open(url, subscribe, token);  \n        return true;      \n    }   \n\n    // ** connect to playback stream (NO endpoint discovery)\n    openPlayback(url:string=null, options?:any, token?:string) {\n        this.debug('openPlayback.........');\n        if(!url) {     // connect to stream api at discovered endpoint\n            url= this.resolveStreamEndpoint();\n            if(!url) { \n                return( new Error('Server has no advertised Stream endpoints!') );\n            }\n            url= url.replace('stream', 'playback');\n        }        \n        let pb= '';\n        let subscribe: string;\n        if(options && typeof options ==='object'){\n            pb+= (options.startTime) ? '?startTime=' + options.startTime.slice(0,options.startTime.indexOf('.')) + 'Z' : '';\n            pb+= (options.playbackRate) ? `&playbackRate=${options.playbackRate}` : '';\n            subscribe= (options.subscribe) ? options.subscribe : null;            \n        }\n        this.stream.open(url + pb, subscribe, token); \n        return true;\n    }      \n\n    // ** process Hello response \n    private processHello(response: any) {\n        this.server.endpoints= (response['endpoints']) ? response['endpoints'] : {};\n        this.server.info= (response['server']) ? response['server'] : {};\n        this.server.apiVersions= (this.server.endpoints) ? Object.keys(this.server.endpoints) : [];\n        this.debug(this.server.endpoints);\n    }\n\n    // ** return preferred WS stream url\n    public resolveStreamEndpoint():string {\n        if(this.server.endpoints[this._version] && this.server.endpoints[this._version]['signalk-ws']) {\n            this.debug(`Connecting endpoint version: ${this._version}`);\n            return `${this.server.endpoints[this._version]['signalk-ws']}`;\n        }\n        else if(this.server.endpoints['v1'] && this.server.endpoints['v1']['signalk-ws']) { \n            this.debug(`Connection falling back to: v1`);\n            return `${this.server.endpoints['v1']['signalk-ws']}` \n        }\n        else { return null }\n    }  \n\n    // ** return signalk-http endpoint url\n    private resolveHttpEndpoint():string {\n        let url: string;\n        if(this.server.endpoints[this._version]) { // ** connection made\n            // ** connect to http endpoint at prescribed version else fall back to default version\n            if(this.server.endpoints[this._version]['signalk-http']) {\n                url= `${this.server.endpoints[this._version]['signalk-http']}`;\n            }\n            else { url= `${this.server.endpoints['v1']['signalk-http']}` }   \n        } \n        else {\n            let msg= 'No current connection http endpoint service! Use connect() to establish a connection.'\n            this.debug(msg);\n        } \n        return url;   \n    }    \n    \n    // ** cleanup on server disconnection\n    private disconnectedFromServer() {\n        this.server.endpoints= {};\n        this.server.info= {};\n        this.server.apiVersions= [];  \n    }\n\n    //** return observable response from http path\n    get(path:string) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`get ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }        \n    };  \n\n    //** return observable response for put to http path\n    put(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`put ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, { headers: headers } );\n        }\n        else { return this.http.put(url, value) }        \n    };\n\n    //** return observable response for post to http path\n    post(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${Path.dotToSlash(path)}`;\n        this.debug(`post ${url}`);\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.post( url, { headers: headers } );\n        }\n        else { return this.http.post(url, value) }        \n    };   \n\n    // ** get auth token for supplied user details **\n    login(username:string, password:string) {\n        let headers= new HttpHeaders().set('Content-Type', `application/json`);\n        return this.http.post(\n            `${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/login`,\n            { \"username\": username, \"password\": password },\n            { headers }\n        );\n    }\n\t\n    // ** logout from server **\n    logout() {\n\t\tlet url=`${this.protocol}://${this.hostname}:${this.port}/signalk/${this._version}/auth/logout`;\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, null, { headers } );\n        }        \n        else { return this.http.put( url, null ) }\n    }\t   \n    \n    //** get data via the snapshot http api path for supplied time\n    snapshot(context:string, time:string) { \n        if(!time) { return }\n        time= time.slice(0,time.indexOf('.')) + 'Z';\n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        url= `${url.replace('api','snapshot')}${Path.contextToPath(context)}?time=${time}`;\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }\n    }\n\n}\n","/*****************************\r\n * SignalKClient Module:\r\n *****************************/\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule} from '@angular/common/http';\r\n\r\n@NgModule({\r\n    imports: [ HttpClientModule ],    \r\n    declarations: [],\r\n    exports: [],\r\n    entryComponents: [], \r\n    providers: []  \r\n})\r\nexport class SignalKClientModule {}\r\n\r\nexport * from './signalk-client';"]}