{"version":3,"sources":["ng://signalk-client-angular/lib/signalk-client.ts"],"names":["SignalKClient","http","this","endpoints","info","apiVersions","ws","self","roles","_connect","Subject","onConnect","asObservable","_close","onClose","_error","onError","_message","onMessage","init","prototype","debug","val","isDevMode","console","log","Object","defineProperty","parseInt","_version","slice","v","server","length","indexOf","_token","login","username","password","headers","HttpHeaders","set","post","protocol","hostname","port","_wsTimeout","useSSL","wsProtocol","hello","get","connect","subscribe","_this","response","url","keys","next","Error","connectDeltaByUrl","error","connectDelta","disconnect","WebSocket","setTimeout","readyState","onopen","e","onclose","onerror","onmessage","data","JSON","parse","isHello","_filter","isDelta","context","close","send","stringify","sendUpdate","path","value","updates","values","options","_i","arguments","subscription","i","isNaN","push","unsubscribe","msg","version","id","getSelfId","uuid","RegExp","test","getSelf","apiGet","getMeta","contextToPath","split","join","resolveHttpEndpoint","Authorization","apiPut","key","put","Injectable","args","providedIn","HttpClient","Alarm"],"mappings":"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","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalKClient {\n\n\tprivate _connect; \t\t\t\n    public onConnect;\t \t\t\n\tprivate _close; \t\t\t\n    public onClose;\t \t\t    \n\tprivate _error; \t\t\t\n    public onError;\t \t\t    \n\tprivate _message; \t\t\t\n    public onMessage;\t \t\t  \n    private ws;                           \n    \n    private hostname: string;\n    private port: number;\n    private protocol: string;\n    private wsProtocol: string;\n\n    private _version: string= 'v1';      // ** default Signal K api version\n    private _filter= null;               // ** id of vessel to filter delta messages\n    private _wsTimeout= 20000;           // ** websocket connection timeout\n    private _token: string;             // token for when security is enabled on the server\n\n    // ** server information block **\n    private server= {\n        endpoints: {},\n        info: {},\n        apiVersions: [],\n        ws: { self: null, roles: {} }\n    }\n\n    private debug(val: any) { if(isDevMode()){ console.log(val) } }\n\n    constructor( private http: HttpClient ) { \n        this._connect= new Subject<string>();\n        this.onConnect= this._connect.asObservable();   \n        this._close= new Subject<string>();\n        this.onClose= this._close.asObservable();  \n        this._error= new Subject<string>();\n        this.onError= this._error.asObservable();  \n        this._message= new Subject<string>();\n        this.onMessage= this._message.asObservable();   \n        this.init();                          \n    }\n\n    // **************** Signal K API VERSION ***************************\n\n    // ** get / set Signal K preferred api version to use **\n    get version():number { return parseInt( this._version.slice(1) ) }\n\n    set version(val: number) {\n        let v:string= 'v'+ val;\n        if(this.server.apiVersions.length==0) { \n            this._version= v;\n            this.debug(`Signal K api version set to: ${v}`);\n        }\n        else {\n            this._version= (this.server.apiVersions.indexOf(v)!=-1) ? v : this._version;\n            this.debug(`Signal K api version set request: ${v}, result: ${this._version}`);\n        }\n    }\n\n    // **************** CONNECTION  ***************************\n\n    // ** set auth token value **\n    set authToken(val:string) { this._token= val }\n\n    // ** get auth token for supplied user details **\n    login(username:string, password:string) {\n        let headers= new HttpHeaders().set('Content-Type', `application/json`);\n        return this.http.post(\n            `${this.protocol}://${this.hostname}:${this.port}/login`,\n            { \"username\": username, \"password\": password },\n            { headers }\n        );\n    }\n\n    // ** get / set websocket connection timeout 3000<=timeout<=60000 **\n    get connectionTimeout():number { return this._wsTimeout }\n\n    set connectionTimeout(val: number) {\n        this._wsTimeout= (val<3000) ? 3000 : (val>60000) ? 60000 : val;\n    }    \n\n    // ** initialise client connection settings\n    private init(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        if(isDevMode()) { \n            hostname= hostname || '192.168.99.100';\n            port= port || 3000;  \n        }\n        else { hostname= hostname || 'localhost' }\n\n        this.hostname = hostname;\n        if(useSSL) {\n            this.protocol = 'https';\n            this.wsProtocol = 'wss';\n            this.port = port || 443;\n        } \n        else {\n            this.protocol = 'http';\n            this.wsProtocol = 'ws';\n            this.port = port || 80;\n        }        \n    }\n\n    // ** Signal K server discovery request (/signalk).  \n    hello(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        this.init(hostname, port, useSSL);\n        return this.get('/signalk');\n    }    \n    \n    // ** connect to server\n    connect(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        this.debug('Contacting Signal K server.........');\n        this.hello(hostname, port).subscribe(    // ** discover endpoints **\n            response=> {\n                this.server.endpoints= (response['endpoints']) ? response['endpoints'] : {};\n                this.server.info= (response['server']) ? response['server'] : {};\n                this.server.apiVersions= (this.server.endpoints) ? Object.keys(this.server.endpoints) : [];\n                this.debug(this.server.endpoints);\n                \n                // ** connect to stream api at preferred version else fall back to default version\n                let url;\n                if(this.server.endpoints[this._version] && this.server.endpoints[this._version]['signalk-ws']) {\n                    this.debug(`Connecting endpoint version: ${this._version}`);\n                    url= `${this.server.endpoints[this._version]['signalk-ws']}`;\n                }\n                else if(this.server.endpoints['v1'] && this.server.endpoints['v1']['signalk-ws']) { \n                    this.debug(`Connection falling back to: v1`);\n                    url= `${this.server.endpoints['v1']['signalk-ws']}` \n                }\n                else { \n                    this._error.next( new Error('No Signal K endpoints found!') );\n                    return;\n                }\n                // ** subscribe **\n                if(subscribe && ['self','all','none'].indexOf(subscribe)!=-1) { \n                    url+=`?subscribe=${subscribe}`;\n                } \n                if(this._token) { url+= `&token=${this._token}` }               \n                this.debug(`Connecting to ${url}`);\n                this.connectDeltaByUrl(url);\n            },\n            error=> { \n                this.server.endpoints= {};\n                this.server.info= {};\n                this.server.apiVersions= [];            \n                return this._error.next( error );\n            }\n        );\n    }  \n\n    // ** connect to delta stream with no endpoint discovery\n    connectDelta(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        this.debug('ConnectDelta.........');\n        this.init(hostname, port, useSSL);\n        let url= `${this.wsProtocol}://${this.hostname}:${this.port}/signalk/${this._version}/stream`;\n        // ** subscribe **\n        if(subscribe && ['self','all','none'].indexOf(subscribe)!=-1) { \n            url+=`?subscribe=${subscribe}`;\n        } \n        if(this._token) { url+= `&token=${this._token}` }\n        this.debug(`Connecting to delta stream at ${url}`);\n        this.connectDeltaByUrl(url);\n    }  \n\n\t// ** connect to delta stream at provided url\n\tprivate connectDeltaByUrl(url) {\n        if(this.ws) { this.disconnect() }\n        this.ws = new WebSocket(url);\n        // ** start connection watchdog **\n        setTimeout( \n            ()=>{\n                if(this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) { \n                    this.debug(`Connection watchdog expired (${this._wsTimeout/1000} sec): ${this.ws.readyState}... aborting connection...`);\n                    this.disconnect(); \n                }\n            }, this._wsTimeout\n        );\n\t\t\n\t\tthis.ws.onopen= e=> { \n            this.debug(`ws.open`);\n\t\t\tthis._connect.next(e);\n\t\t}\n\t\tthis.ws.onclose= e=> { this.debug(`ws.close`); this._close.next(e) }\n\t\tthis.ws.onerror= e=> { this.debug(`ws.error`); this._error.next(e) }\n\t\tthis.ws.onmessage= e=> {\n            let data;\n            if(typeof e.data === 'string') {\n                try { data= JSON.parse(e.data) }\n                catch(e) { return }\n            }\n            if(this.isHello(data)) {\n                this.server.ws.roles= data.roles;\n                this.server.ws.self= data.self;\n            }          \n\t\t\tif(this._filter && this.isDelta(data)) {\n                if(data.context== this._filter) { this._message.next(data) } \n            }\n            else { this._message.next(data) }\n\t\t}\n    }  \n\n    // ** disconnect from Signal K stream\n    disconnect() {\n        this.ws.close();\n        this.ws= null;\n        this.server.ws= { self: null, roles: {} };\n    }\n\n\n    // **************** STREAM API ***************************\n\n    // ** send data to Signal K stream\n    send(data:any) {\n        if(this.ws) {\n            if(typeof data === 'object') { data= JSON.stringify(data) }\n            this.ws.send(data);\n        }\n    }\n\n    // ** send value via delta stream update **\n    sendUpdate(context:string='self', path:string, value:any) {\n        let val= { \n            context: (context=='self') ? 'vessels.self' : context,\n            updates: [ {\n                values: [{ path: path, value: value }] \n            } ] \n        }\n        this.debug(`sending update: ${path}= ${value})`);\n        this.send(val);\n    }\n\n    // ** Subscribe to Delta stream messages **\n    subscribe(context:string='*', path:string='*', ...options) {\n        let data= {\n            context: (context=='self') ? 'vessels.self' : context,\n            subscribe: []\n        };\n\n        let subscription= {};\n        subscription['path']= path;\n        for(let i in options) {\n            switch(i) {\n                case '0': \n                    if( !isNaN(options[i]) ) { subscription['period']= parseInt(options[i]) }\n                    break;\n                case '1': \n                    if( options[i]=='delta' || options[i]=='full') { \n                        subscription['format']= options[i] \n                    }\n                    break;\n                case '2': \n                    if( options[i]=='instant' || options[i]=='ideal' \n                            || options[i]== 'fixed' ) {\n                                subscription['policy']= options[i];\n                    }\n                    break;     \n                case '3': \n                    if(subscription['policy']=='instant') {\n                        if( !isNaN(options[i]) ) { subscription['minPeriod']= parseInt(options[i]) } \n                    }\n                    break;\n            }\n        }\n        data.subscribe.push(subscription);\n        this.send(data);        \n    }\n\n    // ** Unsubscribe from Delta stream messages **\n    unsubscribe(context:string='*', path:string='*') {\n        context= (context=='self') ? 'vessels.self' : context;\n        this.send({\n            \"context\": context,\n            \"unsubscribe\": [ {\"path\": path} ]\n        });\n    }\n\n    // ** returns true if recieved message is a Delta message\n    isDelta(msg) { return typeof msg.context!= 'undefined' }\n    // ** returns true if recieved message is a Hello message\n    isHello(msg) { return typeof msg.version!= 'undefined' }\n\n\n    // ** get / set filter to select delta messages just for supplied vessel id   \n    get filter(): string { return this._filter }\n    // ** set filter= null to remove message filtering\n    set filter(id:string) { \n        if(!id) {   // ** clear filter\n            this._filter=null;\n            return;\n        }\n        if( id.indexOf('self')!=-1 ) {  // ** self\n            if(!this.server.ws.self) {\n                this.getSelfId().subscribe( id=> { this._filter= id } );\n            }\n            else { this._filter= this.server.ws.self }\n        }\n        else {  // ** uuid\n            let uuid= RegExp(\"^urn:mrn:signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$\")\n            if(id.indexOf('vessels.')!=-1) { id= id.slice(id.indexOf('.')+1) }\n            if(uuid.test(id)) { this._filter= `vessels.${id}` }\n        }\n    }\n\n    // ** Clear notification / alarm **\n    /*clearAlarm(context:string='self', alarmPath:string) {\n        this.sendUpdate(context, `notifications.${alarmPath}`, null);\n    } \n    \n    // ** Set notification / alarm **\n    setAlarm(context:string='self', alarmPath:string, value:Alarm) {\n    let meta.zones= [\n            {\"upper\": 4, \"state\": \"alarm\", \"message\": \"Stopped or very slow\"},\n            {\"lower\": 4, \"upper\": 60, \"state\": \"normal\"},\n            {\"lower\": 60, \"upper\": 65, \"state\": \"warn\", \"message\": \"Approaching maximum\"},\n            {\"lower\": 65, \"state\": \"alarm\", \"message\": \"Exceeding maximum\"}\n          ]\n    }*/\n        \n\n    // **************** HTTP API ***************************\n    \n    // ** Returns the contents of the Signal K tree pointed to by self\n    getSelf() { return this.apiGet(`vessels/self`) }\n\n    // ** Returns the self identity\n    getSelfId() { return this.apiGet(`self`) }\n\n    // ** return observable response for meta object at the specified context and path\n    getMeta(context:string, path:string) { \n        return this.apiGet(`${this.contextToPath(context)}/${path.split('.').join('/')}/meta`);\n    }    \n\n    //** return observable response from http api path\n    apiGet(path:string) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(path[0]=='/') { path= path.slice(1) }\n        url+= path;\n        this.debug(`apiGet ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }\n    }\n\n    //** Send value to http api path\n    apiPut(context:string, path:string, key:any, value:any) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(path[0]=='/') { path= path.slice(1) }\n        url+= this.contextToPath(context) + '/' + path;\n\n        let msg = { value: {} } \n        msg.value[key]= value;\n\n        this.debug(`apiPut ${url}`);\n        this.debug(JSON.stringify(msg));\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put(url, msg, { headers: headers } );\n        }        \n        else { return this.http.put(url, msg) }\n    }    \n    \n    //** return observable response from http path\n    private get(path:string) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${path}`;\n        this.debug(`get ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { return this.http.get(url) }        \n    };  \n\n    // ** return url for connected signalk-http endpoint\n    private resolveHttpEndpoint() {\n        let url;\n        if(this.server.endpoints[this._version]) { // ** connection made\n            // ** connect to http endpoint at prescribed version else fall back to default version\n            if(this.server.endpoints[this._version]['signalk-http']) {\n                url= `${this.server.endpoints[this._version]['signalk-http']}`;\n            }\n            else { url= `${this.server.endpoints['v1']['signalk-http']}` }   \n        } \n        else {\n            let msg= 'No current connection http endpoint service! Use connect() to establish a connection.'\n            this.debug(msg);\n            this._error.next(new Error(msg) );\n        } \n        return url;   \n    }\n\n    // ** parse context to valid Signal K path\n    private contextToPath(context:string) {\n        let res= (context=='self' ) ? 'vessels.self': context;\n        return res.split('.').join('/');\n    }\n\n}\n\n\n// ** Signal K Alarm class\nexport class Alarm {\n    upper: number= null;    // ** upper limit value\n    lower: number= null;    // ** lower limit value\n    state: string= null;      // ** ['warn', 'alarm']\n    message: string= null;  // ** message text\n}\n\n\n"]}