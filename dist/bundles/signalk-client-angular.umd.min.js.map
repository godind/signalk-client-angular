{"version":3,"sources":["ng://signalk-client-angular/lib/signalk-client.ts"],"names":["SignalKClient","http","this","authRequired","endpoints","info","apiVersions","ws","self","roles","_connect","Subject","onConnect","asObservable","_close","onClose","_error","onError","_message","onMessage","init","prototype","debug","val","isDevMode","console","log","Object","defineProperty","parseInt","_version","slice","v","server","length","indexOf","_token","login","username","password","headers","HttpHeaders","set","post","protocol","hostname","port","logout","url","put","_wsTimeout","useSSL","wsProtocol","hello","get","connect","subscribe","_this","response","keys","next","Error","connectDeltaByUrl","error","connectDelta","disconnect","WebSocket","setTimeout","readyState","onopen","e","onclose","onerror","onmessage","data","JSON","parse","isHello","_filter","isDelta","context","close","send","stringify","sendUpdate","path","value","updates","values","options","_i","arguments","subscription","i","isNaN","push","unsubscribe","msg","version","id","getSelfId","uuid","RegExp","test","raiseAlarm","alarmPath","alarm","clearAlarm","getSelf","apiGet","getMeta","contextToPath","dotToSlash","resolveHttpEndpoint","Authorization","apiPut","key","split","join","slashToDot","Injectable","args","providedIn","HttpClient","normal","alert","warn","emergency","visual","sound","Alarm","message","AlarmState","AlarmMethod"],"mappings":"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","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalKClient {\n\n\tprivate _connect; \t\t\t\n    public onConnect;\t \t\t\n\tprivate _close; \t\t\t\n    public onClose;\t \t\t    \n\tprivate _error; \t\t\t\n    public onError;\t \t\t    \n\tprivate _message; \t\t\t\n    public onMessage;\t \t\t  \n    private ws;                           \n    \n    private hostname: string;\n    private port: number;\n    private protocol: string;\n    private wsProtocol: string;\n\n    private _version: string= 'v1';      // ** default Signal K api version\n    private _filter= null;               // ** id of vessel to filter delta messages\n    private _wsTimeout= 20000;           // ** websocket connection timeout\n    private _token: string;             // token for when security is enabled on the server\n\n    // ** server information block **\n    private server= {\n        authRequired: false,\n        endpoints: {},\n        info: {},\n        apiVersions: [],\n        ws: { self: null, roles: {} }\n    }\n\n    private debug(val: any) { if(isDevMode()){ console.log(val) } }\n\n    constructor( private http: HttpClient ) { \n        this._connect= new Subject<string>();\n        this.onConnect= this._connect.asObservable();   \n        this._close= new Subject<string>();\n        this.onClose= this._close.asObservable();  \n        this._error= new Subject<string>();\n        this.onError= this._error.asObservable();  \n        this._message= new Subject<string>();\n        this.onMessage= this._message.asObservable();   \n        this.init();                          \n    }\n\n    // **************** Signal K API VERSION ***************************\n\n    // ** get / set Signal K preferred api version to use **\n    get version():number { return parseInt( this._version.slice(1) ) }\n\n    set version(val: number) {\n        let v:string= 'v'+ val;\n        if(this.server.apiVersions.length==0) { \n            this._version= v;\n            this.debug(`Signal K api version set to: ${v}`);\n        }\n        else {\n            this._version= (this.server.apiVersions.indexOf(v)!=-1) ? v : this._version;\n            this.debug(`Signal K api version set request: ${v}, result: ${this._version}`);\n        }\n    }\n    // ** get list of api versions supported by server\n    get apiVersions() { return this.server.apiVersions }\n\n    // **************** CONNECTION  ***************************\n\n    // ** is Auth required for this server **\n    get authRequired() { return this.server.authRequired }\n\n    // ** set auth token value **\n    set authToken(val:string) { this._token= val }\n\n    // ** get auth token for supplied user details **\n    login(username:string, password:string) {\n        let headers= new HttpHeaders().set('Content-Type', `application/json`);\n        return this.http.post(\n            `${this.protocol}://${this.hostname}:${this.port}/auth/login`,\n            { \"username\": username, \"password\": password },\n            { headers }\n        );\n    }\n\t\n    // ** logout from server **\n    logout() {\n\t\tlet url=`${this.protocol}://${this.hostname}:${this.port}/auth/logout`;\n\t\tif(this._token) { url+= `&token=${this._token}` }     \n        return this.http.put(\n            url,\n            {}\n        );\n    }\t\n\n    // ** get / set websocket connection timeout 3000<=timeout<=60000 **\n    get connectionTimeout():number { return this._wsTimeout }\n\n    set connectionTimeout(val: number) {\n        this._wsTimeout= (val<3000) ? 3000 : (val>60000) ? 60000 : val;\n    }    \n\n    // ** initialise client connection settings\n    private init(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        if(isDevMode()) { \n            hostname= hostname || '192.168.99.100';\n            port= port || 3000;  \n        }\n        else { hostname= hostname || 'localhost' }\n\n        this.hostname = hostname;\n        if(useSSL) {\n            this.protocol = 'https';\n            this.wsProtocol = 'wss';\n            this.port = port || 443;\n        } \n        else {\n            this.protocol = 'http';\n            this.wsProtocol = 'ws';\n            this.port = port || 80;\n        }        \n    }\n\n    // ** Signal K server discovery request (/signalk).  \n    hello(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        this.init(hostname, port, useSSL);\n        /*this.get('/loginStatus').subscribe( r=> {\n            this.server.authRequired=(r['authenticationRequired']) ? true : false;\n        })*/\n        return this.get('/signalk');\n    }    \n    \n    // ** connect to server\n    connect(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        this.debug('Contacting Signal K server.........');\n        this.hello(hostname, port).subscribe(    // ** discover endpoints **\n            response=> {\n                this.server.endpoints= (response['endpoints']) ? response['endpoints'] : {};\n                this.server.info= (response['server']) ? response['server'] : {};\n                this.server.apiVersions= (this.server.endpoints) ? Object.keys(this.server.endpoints) : [];\n                this.debug(this.server.endpoints);\n                \n                // ** connect to stream api at preferred version else fall back to default version\n                let url;\n                if(this.server.endpoints[this._version] && this.server.endpoints[this._version]['signalk-ws']) {\n                    this.debug(`Connecting endpoint version: ${this._version}`);\n                    url= `${this.server.endpoints[this._version]['signalk-ws']}`;\n                }\n                else if(this.server.endpoints['v1'] && this.server.endpoints['v1']['signalk-ws']) { \n                    this.debug(`Connection falling back to: v1`);\n                    url= `${this.server.endpoints['v1']['signalk-ws']}` \n                }\n                else { \n                    this._error.next( new Error('No Signal K endpoints found!') );\n                    return;\n                }\n                // ** subscribe **\n                if(subscribe) { url+=`?subscribe=${subscribe}` } \n                if(this._token) { url+= `&token=${this._token}` }               \n                this.debug(`Connecting to ${url}`);\n                this.connectDeltaByUrl(url);\n            },\n            error=> { \n                this.server.endpoints= {};\n                this.server.info= {};\n                this.server.apiVersions= [];            \n                return this._error.next( error );\n            }\n        );\n    }  \n\n    // ** connect to delta stream with no endpoint discovery\n    connectDelta(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        this.debug('ConnectDelta.........');\n        this.init(hostname, port, useSSL);\n        let url= `${this.wsProtocol}://${this.hostname}:${this.port}/signalk/${this._version}/stream`;\n        // ** subscribe **\n        if(subscribe) { url+=`?subscribe=${subscribe}` } \n        if(this._token) { url+= `&token=${this._token}` }\n        this.debug(`Connecting to delta stream at ${url}`);\n        this.connectDeltaByUrl(url);\n    }  \n\n\t// ** connect to delta stream at provided url\n\tprivate connectDeltaByUrl(url) {\n        if(this.server.authRequired && !this._token) {\n            this.debug('Auth Required and NO token available!');\n            this._error.next(new Error('Auth Required and NO token available!'));\n        }\n        if(this.ws) { this.disconnect() }\n        this.ws = new WebSocket(url);\n        // ** start connection watchdog **\n        setTimeout( \n            ()=>{\n                if(this.ws && (this.ws.readyState!=1 && this.ws.readyState!=3) ) { \n                    this.debug(`Connection watchdog expired (${this._wsTimeout/1000} sec): ${this.ws.readyState}... aborting connection...`);\n                    this.disconnect(); \n                }\n            }, this._wsTimeout\n        );\n\t\t\n\t\tthis.ws.onopen= e=> { this.debug(`ws.open`); this._connect.next(e) }\n\t\tthis.ws.onclose= e=> { this.debug(`ws.close`); this._close.next(e) }\n\t\tthis.ws.onerror= e=> { this.debug(`ws.error`); this._error.next(e) }\n\t\tthis.ws.onmessage= e=> {\n            let data;\n            if(typeof e.data === 'string') {\n                try { data= JSON.parse(e.data) }\n                catch(e) { return }\n            }\n            if(this.isHello(data)) {\n                this.server.ws.roles= data.roles;\n                this.server.ws.self= data.self;\n            }          \n\t\t\tif(this._filter && this.isDelta(data)) {\n                if(data.context== this._filter) { this._message.next(data) } \n            }\n            else { this._message.next(data) }\n\t\t}\n    }  \n\n    // ** disconnect from Signal K stream\n    disconnect() {\n        if(this.ws) {\n            this.ws.close();\n            this.ws= null;\n            this.server.ws= { self: null, roles: {} };\n        }\n    }\n\n\n    // **************** STREAM API ***************************\n\n    // ** send data to Signal K stream\n    send(data:any) {\n        if(this.ws) {\n            if(typeof data === 'object') { data= JSON.stringify(data) }\n            this.ws.send(data);\n        }\n    }\n\n    // ** send value via delta stream update **\n    sendUpdate(context:string='self', path:string, value:any) {\n        let val= { \n            context: (context=='self') ? 'vessels.self' : context,\n            updates: [ {\n                values: [{ path: path, value: value }] \n            } ] \n        }\n        this.debug(`sending update: ${JSON.stringify(val)}`);\n        this.send(val);\n    }\n\n    // ** Subscribe to Delta stream messages **\n    subscribe(context:string='*', path:string='*', ...options) {\n        let data= {\n            context: (context=='self') ? 'vessels.self' : context,\n            subscribe: []\n        };\n\n        let subscription= {};\n        subscription['path']= path;\n        for(let i in options) {\n            switch(i) {\n                case '0': \n                    if( !isNaN(options[i]) ) { subscription['period']= parseInt(options[i]) }\n                    break;\n                case '1': \n                    if( options[i]=='delta' || options[i]=='full') { \n                        subscription['format']= options[i] \n                    }\n                    break;\n                case '2': \n                    if( options[i]=='instant' || options[i]=='ideal' \n                            || options[i]== 'fixed' ) {\n                                subscription['policy']= options[i];\n                    }\n                    break;     \n                case '3': \n                    if(subscription['policy']=='instant') {\n                        if( !isNaN(options[i]) ) { subscription['minPeriod']= parseInt(options[i]) } \n                    }\n                    break;\n            }\n        }\n        data.subscribe.push(subscription);\n        this.send(data);        \n    }\n\n    // ** Unsubscribe from Delta stream messages **\n    unsubscribe(context:string='*', path:string='*') {\n        context= (context=='self') ? 'vessels.self' : context;\n        this.send({\n            \"context\": context,\n            \"unsubscribe\": [ {\"path\": path} ]\n        });\n    }\n\n    // ** returns true if recieved message is a Delta message\n    isDelta(msg) { return typeof msg.context!= 'undefined' }\n    // ** returns true if recieved message is a Hello message\n    isHello(msg) { return typeof msg.version!= 'undefined' }\n\n\n    // ** get / set filter to select delta messages just for supplied vessel id   \n    get filter(): string { return this._filter }\n    // ** set filter= null to remove message filtering\n    set filter(id:string) { \n        if(!id) {   // ** clear filter\n            this._filter=null;\n            return;\n        }\n        if( id.indexOf('self')!=-1 ) {  // ** self\n            if(!this.server.ws.self) {\n                this.getSelfId().subscribe( id=> { this._filter= id } );\n            }\n            else { this._filter= this.server.ws.self }\n        }\n        else {  // ** uuid\n            let uuid= RegExp(\"^urn:mrn:signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$\")\n            if(id.indexOf('vessels.')!=-1) { id= id.slice(id.indexOf('.')+1) }\n            if(uuid.test(id)) { this._filter= `vessels.${id}` }\n        }\n    }\n\n    // ** Raise an alarm message **\n    raiseAlarm(context:string='self', alarmPath:string, alarm:Alarm) {\n        this.sendUpdate(context, `notifications.${alarmPath}`, alarm);\n    }\n\n    // ** Clear alarm **\n    clearAlarm(context:string='self', alarmPath:string) {\n        this.sendUpdate(context, `notifications.${alarmPath}`, null);\n    } \n            \n\n    // **************** HTTP API ***************************\n    \n    // ** Returns the contents of the Signal K tree pointed to by self\n    getSelf() { return this.apiGet(`vessels/self`) }\n\n    // ** Returns the self identity\n    getSelfId() { return this.apiGet(`self`) }\n\n    // ** return observable response for meta object at the specified context and path\n    getMeta(context:string, path:string) { \n        return this.apiGet(`${this.contextToPath(context)}/${this.dotToSlash(path)}/meta`);\n    }    \n\n    //** return observable response from http api path\n    apiGet(path:string) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(path[0]=='/') { path= path.slice(1) }\n        url+= this.dotToSlash(path);\n        this.debug(`apiGet ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }              \n            return this.http.get(url);\n        }\n    }\n\n    //** Send value to http api path\n\tapiPut(context:string, path:string, value:any);\n\tapiPut(context:string, path:string, key:any, value:any);\n\t\n    apiPut(context:string, path:string, key?:any, value?:any) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(path[0]=='/') { path= path.slice(1) }\n        url+= this.contextToPath(context) + '/' + this.dotToSlash(path);\n\n        let msg = { value: {} } \n        if(typeof value=='undefined') { msg.value= key }\n\t\telse { msg.value[key]= value }\n\n        this.debug(`apiPut ${url}`);\n        this.debug(JSON.stringify(msg));\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put(url, msg, { headers: headers } );\n        }        \n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }              \n            return this.http.put(url, msg); \n        }\n    }    \n    \n    //** return observable response from http path\n    get(path:string) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${this.dotToSlash(path)}`;\n        this.debug(`get ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.get( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }           \n            return this.http.get(url);\n        }        \n    };  \n\n    //** return observable response for put to http path\n    put(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${this.dotToSlash(path)}`;\n        this.debug(`put ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.put( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }           \n            return this.http.put(url, value);\n        }        \n    };\n\n    //** return observable response for post to http path\n    post(path:string, value:any) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${this.dotToSlash(path)}`;\n        this.debug(`post ${url}`);\n\n        if(this._token) {\n            let headers= new HttpHeaders( { 'Authorization': `JWT ${this._token}` } );\n            return this.http.post( url, { headers: headers } );\n        }\n        else { \n            if(this.server.authRequired) {\n                this.debug('Auth Required and NO token available!');\n                this._error.next(new Error('Auth Required and NO token available!')); \n            }           \n            return this.http.post(url, value);\n        }        \n    };    \n\n    // ** return url for connected signalk-http endpoint\n    private resolveHttpEndpoint() {\n        let url;\n        if(this.server.endpoints[this._version]) { // ** connection made\n            // ** connect to http endpoint at prescribed version else fall back to default version\n            if(this.server.endpoints[this._version]['signalk-http']) {\n                url= `${this.server.endpoints[this._version]['signalk-http']}`;\n            }\n            else { url= `${this.server.endpoints['v1']['signalk-http']}` }   \n        } \n        else {\n            let msg= 'No current connection http endpoint service! Use connect() to establish a connection.'\n            this.debug(msg);\n            this._error.next(new Error(msg) );\n        } \n        return url;   \n    }\n\n    // ** parse context to valid Signal K path\n    private contextToPath(context:string) {\n        let res= (context=='self' ) ? 'vessels.self': context;\n        return res.split('.').join('/');\n    }\n\n    // ** transform dot notation to slash\n    private dotToSlash(path:string) {\n        if(path.indexOf('.')!=-1) {\n            return path.split('.').join('/');\n        }\n        else { return path }\n    }\n\n    // ** transform slash notation to dot\n    private slashToDot(path:string) {\n        if(path.indexOf('/')!=-1) {\n            return path.split('/').join('.');\n        }\n        else { return path }\n    }    \n\n}\n\n// ** Alarm state **\nexport enum  AlarmState {\n    normal='normal',\n    alert='alert',\n    warn='warn',\n    alarm='alarm',\n    emergency='emergency'\n}\n\n// ** Alarm Method **\nexport enum  AlarmMethod {\n    visual='visual',\n    sound='sound'\n}\n\n// ** Alarm class\nexport class Alarm {\n    state: AlarmState= AlarmState.normal;\n    method: Array<AlarmMethod>= [AlarmMethod.visual, AlarmMethod.sound];\n    message: string;\n\n    constructor(message:string=null) { this.message= message }\n}\n\n\n"]}