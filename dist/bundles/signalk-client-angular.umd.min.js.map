{"version":3,"sources":["ng://signalk-client-angular/lib/signalk-client.ts"],"names":["SignalKClient","http","this","endpoints","info","apiVersions","ws","self","roles","_connect","Subject","onConnect","asObservable","_close","onClose","_error","onError","_message","onMessage","init","prototype","debug","val","isDevMode","console","log","Object","defineProperty","parseInt","_version","slice","v","server","length","indexOf","hostname","port","useSSL","protocol","wsProtocol","hello","get","connect","subscribe","_this","response","url","keys","next","Error","connectDeltaByUrl","error","connectDelta","disconnect","WebSocket","onopen","e","onclose","onerror","onmessage","data","JSON","parse","isHello","_filter","isDelta","context","close","send","stringify","path","options","_i","arguments","subscription","i","isNaN","push","unsubscribe","msg","version","id","getSelfId","uuid","RegExp","test","getSelf","apiGet","getMeta","contextToPath","split","join","resolveHttpEndpoint","apiPut","key","value","put","Injectable","args","providedIn","HttpClient"],"mappings":"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","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalKClient {\n\n\tprivate _connect; \t\t\t\n    public onConnect;\t \t\t\n\tprivate _close; \t\t\t\n    public onClose;\t \t\t    \n\tprivate _error; \t\t\t\n    public onError;\t \t\t    \n\tprivate _message; \t\t\t\n    public onMessage;\t \t\t  \n    private ws;                           \n    \n    private hostname: string;\n    private port: number;\n    private protocol: string;\n    private wsProtocol: string;\n\n    private _version: string= 'v1';      // ** default Signal K api version\n    private _filter= null;               // ** id of vessel to filter delta messages\n\n    // ** server information block **\n    private server= {\n        endpoints: {},\n        info: {},\n        apiVersions: [],\n        ws: { self: null, roles: {} }\n    }\n\n    private debug(val: any) { if(isDevMode()){ console.log(val) } }\n\n    constructor( private http: HttpClient ) { \n        this._connect= new Subject<string>();\n        this.onConnect= this._connect.asObservable();   \n        this._close= new Subject<string>();\n        this.onClose= this._close.asObservable();  \n        this._error= new Subject<string>();\n        this.onError= this._error.asObservable();  \n        this._message= new Subject<string>();\n        this.onMessage= this._message.asObservable();   \n        this.init();                          \n    }\n\n    // **************** Signal K API VERSION ***************************\n\n    // ** get / set Signal K preferred api version to use **\n    get version():number { return parseInt( this._version.slice(1) ) }\n\n    set version(val: number) {\n        let v:string= 'v'+ val;\n        if(this.server.apiVersions.length==0) { \n            this._version= v;\n            this.debug(`Signal K api version set to: ${v}`);\n        }\n        else {\n            this._version= (this.server.apiVersions.indexOf(v)!=-1) ? v : this._version;\n            this.debug(`Signal K api version set request: ${v}, result: ${this._version}`);\n        }\n    }\n\n    // **************** CONNECTION  ***************************\n\n    // ** initialise client connection settings\n    private init(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        if(isDevMode()) { \n            hostname= hostname || '192.168.99.100';\n            port= port || 3000;  \n        }\n        else { hostname= hostname || 'localhost' }\n\n        this.hostname = hostname;\n        if(useSSL) {\n            this.protocol = 'https';\n            this.wsProtocol = 'wss';\n            this.port = port || 443;\n        } \n        else {\n            this.protocol = 'http';\n            this.wsProtocol = 'ws';\n            this.port = port || 80;\n        }        \n    }\n\n    // ** Signal K server discovery request (/signalk).  \n    hello(hostname:string=null, port:number=null, useSSL:boolean=false) {\n        this.init(hostname, port, useSSL);\n        return this.get('/signalk');\n    }    \n    \n    // ** connect to server\n    connect(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        this.debug('Contacting Signal K server.........');\n        this.hello(hostname, port).subscribe(    // ** discover endpoints **\n            response=> {\n                this.server.endpoints= (response['endpoints']) ? response['endpoints'] : {};\n                this.server.info= (response['server']) ? response['server'] : {};\n                this.server.apiVersions= (this.server.endpoints) ? Object.keys(this.server.endpoints) : [];\n                this.debug(this.server.endpoints);\n                \n                // ** connect to stream api at preferred version else fall back to default version\n                let url;\n                if(this.server.endpoints[this._version] && this.server.endpoints[this._version]['signalk-ws']) {\n                    this.debug(`Connecting endpoint version: ${this._version}`);\n                    url= `${this.server.endpoints[this._version]['signalk-ws']}`;\n                }\n                else if(this.server.endpoints['v1'] && this.server.endpoints['v1']['signalk-ws']) { \n                    this.debug(`Connection falling back to: v1`);\n                    url= `${this.server.endpoints['v1']['signalk-ws']}` \n                }\n                else { \n                    this._error.next( new Error('No Signal K endpoints found!') );\n                    return;\n                }\n                // ** subscribe **\n                if(subscribe && ['self','all','none'].indexOf(subscribe)!=-1) { \n                    url+=`?subscribe=${subscribe}`;\n                }                \n                this.debug(`Connecting to ${url}`);\n                this.connectDeltaByUrl(url);\n            },\n            error=> { \n                this.server.endpoints= {};\n                this.server.info= {};\n                this.server.apiVersions= [];            \n                return this._error.next( error );\n            }\n        );\n    }  \n\n    // ** connect to delta stream with no endpoint discovery\n    connectDelta(hostname:string=null, port:number=null, useSSL:boolean=false, subscribe:string=null) {\n        this.debug('ConnectDelta.........');\n        this.init(hostname, port, useSSL);\n        let url= `${this.wsProtocol}://${this.hostname}:${this.port}/signalk/${this._version}/stream`;\n        // ** subscribe **\n        if(subscribe && ['self','all','none'].indexOf(subscribe)!=-1) { \n            url+=`?subscribe=${subscribe}`;\n        }                \n        this.debug(`Connecting to delta stream at ${url}`);\n        this.connectDeltaByUrl(url);\n    }  \n\n\t// ** connect to delta stream at provided url\n\tprivate connectDeltaByUrl(url) {\n        if(this.ws) { this.disconnect() }\n\t\tthis.ws = new WebSocket(url);\n\t\t\n\t\tthis.ws.onopen= e=> { \n            this.debug(`ws.open`);\n\t\t\tthis._connect.next(e);\n\t\t}\n\t\tthis.ws.onclose= e=> { this.debug(`ws.close`); this._close.next(e) }\n\t\tthis.ws.onerror= e=> { this.debug(`ws.error`); this._error.next(e) }\n\t\tthis.ws.onmessage= e=> {\n            let data;\n            if(typeof e.data === 'string') {\n                try { data= JSON.parse(e.data) }\n                catch(e) { return }\n            }\n            if(this.isHello(data)) {\n                this.server.ws.roles= data.roles;\n                this.server.ws.self= data.self;\n            }          \n\t\t\tif(this._filter && this.isDelta(data)) {\n                if(data.context== this._filter) { this._message.next(data) } \n            }\n            else { this._message.next(data) }\n\t\t}\n    }  \n\n    // ** disconnect from Signal K stream\n    disconnect() {\n        this.ws.close();\n        this.ws= null;\n        this.server.ws= { self: null, roles: {} };\n    }\n\n\n    // **************** STREAM API ***************************\n\n    // ** send data to Signal K stream\n    send(data:any) {\n        if(this.ws) {\n            if(typeof data === 'object') { data= JSON.stringify(data) }\n            this.ws.send(data);\n        }\n    }\n\n    // ** Subscribe to Delta stream messages **\n    subscribe(context:string='*', path:string='*', ...options) {\n        let data= {\n            context: (context=='self') ? 'vessels.self' : context,\n            subscribe: []\n        };\n\n        let subscription= {};\n        subscription['path']= path;\n        for(let i in options) {\n            switch(i) {\n                case '0': \n                    if( !isNaN(options[i]) ) { subscription['period']= parseInt(options[i]) }\n                    break;\n                case '1': \n                    if( options[i]=='delta' || options[i]=='full') { \n                        subscription['format']= options[i] \n                    }\n                    break;\n                case '2': \n                    if( options[i]=='instant' || options[i]=='ideal' \n                            || options[i]== 'fixed' ) {\n                                subscription['policy']= options[i];\n                    }\n                    break;     \n                case '3': \n                    if(subscription['policy']=='instant') {\n                        if( !isNaN(options[i]) ) { subscription['minPeriod']= parseInt(options[i]) } \n                    }\n                    break;\n            }\n        }\n        data.subscribe.push(subscription);\n        this.send(data);        \n    }\n\n    // ** Unsubscribe from Delta stream messages **\n    unsubscribe(context:string='*', path:string='*') {\n        context= (context=='self') ? 'vessels.self' : context;\n        this.send({\n            \"context\": context,\n            \"unsubscribe\": [ {\"path\": path} ]\n        });\n    }\n\n    // ** returns true if recieved message is a Delta message\n    isDelta(msg) { return typeof msg.context!= 'undefined' }\n    // ** returns true if recieved message is a Hello message\n    isHello(msg) { return typeof msg.version!= 'undefined' }\n\n    // ** get / set filter to select delta messages just for supplied vessel id   \n    get filter(): string { return this._filter }\n    // ** set filter= null to remove message filtering\n    set filter(id:string) { \n        if(!id) {   // ** clear filter\n            this._filter=null;\n            return;\n        }\n        if( id.indexOf('self')!=-1 ) {  // ** self\n            if(!this.server.ws.self) {\n                this.getSelfId().subscribe( id=> { this._filter= id } );\n            }\n            else { this._filter= this.server.ws.self }\n        }\n        else {  // ** uuid\n            let uuid= RegExp(\"^urn:mrn:signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$\")\n            if(id.indexOf('vessels.')!=-1) { id= id.slice(id.indexOf('.')+1) }\n            if(uuid.test(id)) { this._filter= `vessels.${id}` }\n        }\n    }\n        \n\n    // **************** HTTP API ***************************\n    \n    // ** Returns the contents of the Signal K tree pointed to by self\n    getSelf() { return this.apiGet(`vessels/self`) }\n\n    // ** Returns the self identity\n    getSelfId() { return this.apiGet(`self`) }\n\n    // ** return observable response for meta object at the specified context and path\n    getMeta(context:string, path:string) { \n        return this.apiGet(`${this.contextToPath(context)}/${path.split('.').join('/')}/meta`);\n    }    \n\n    //** return observable response from http api path\n    apiGet(path:string) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(path[0]=='/') { path= path.slice(1) }\n        url+= path;\n        this.debug(`apiGet ${url}`);\n        return this.http.get(url);\n    }\n\n    //** Send value to http api path\n    apiPut(context:string, path:string, key:any, value:any) { \n        let url= this.resolveHttpEndpoint();\n        if(!url) { return }\n        if(path[0]=='/') { path= path.slice(1) }\n        url+= this.contextToPath(context) + '/' + path;\n\n        let msg = { value: {} } \n        msg.value[key]= value;\n    \n        this.debug(`apiPut ${url}`);\n        this.debug(JSON.stringify(msg));\n        return this.http.put(url, msg);\n    }    \n    \n    //** return observable response from http path\n    private get(path:string) { \n        let url= `${this.protocol}://${this.hostname}:${this.port}${path}`;\n        this.debug(`get ${url}`);\n        return this.http.get(url);\n    };  \n\n    // ** return url for connected signalk-http endpoint\n    private resolveHttpEndpoint() {\n        let url;\n        if(this.server.endpoints[this._version]) { // ** connection made\n            // ** connect to http endpoint at prescribed version else fall back to default version\n            if(this.server.endpoints[this._version]['signalk-http']) {\n                url= `${this.server.endpoints[this._version]['signalk-http']}`;\n            }\n            else { url= `${this.server.endpoints['v1']['signalk-http']}` }   \n        } \n        else {\n            let msg= 'No current connection http endpoint service! Use connect() to establish a connection.'\n            this.debug(msg);\n            this._error.next(new Error(msg) );\n        } \n        return url;   \n    }\n\n    // ** parse context to valid Signal K path\n    private contextToPath(context:string) {\n        let res= (context=='self' ) ? 'vessels.self': context;\n        return res.split('.').join('/');\n    }\n\n}\n"]}